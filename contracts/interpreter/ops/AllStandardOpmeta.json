[
    {
        "name": "CHAINLIN_PRICE",
        "desc": "Takes 2 items from constants array and calls the Chainlink Oracle to get price and stack it",
        "operand": [],
        "inputs": {
            "parameters": [
                {
                    "name": "Feed",
                    "desc": "address of the price feed"
                },
                {
                    "name": "Stale After",
                    "desc": "amount of time that price will be valid"
                }
            ]
        },
        "outputs": 1,
        "aliases": [
            "CHAINLINKPRICE",
            "PRICE"
        ]
    },
    {
        "name": "CALL",
        "desc": "Takes some items from the stack and runs a source with sub-stack and puts the results back to the stack",
        "operand": [
            {
                "name": "Inputs",
                "bits": [
                    0,
                    3
                ],
                "validRange": [
                    [
                        0,
                        15
                    ]
                ]
            },
            {
                "name": "Output Size",
                "desc": "number of outputs",
                "bits": [
                    4,
                    7
                ],
                "validRange": [
                    [
                        0,
                        15
                    ]
                ]
            },
            {
                "name": "Source Index",
                "desc": "index of the source to run",
                "bits": [
                    8,
                    11
                ],
                "validRange": [
                    [
                        0,
                        15
                    ]
                ]
            }
        ],
        "inputs": {
            "bits": [
                0,
                3
            ],
            "parameters": [
                {
                    "name": "input",
                    "validLength": [
                        [
                            0,
                            15
                        ]
                    ]
                }
            ]
        },
        "outputs": {
            "bits": [
                4,
                7
            ]
        },
        "aliases": [
            "FUNCTION",
            "FN"
        ]
    },
    {
        "name": "CONTEXT",
        "desc": "Inserts an context cell into the stack by reading column and row from operand",
        "operand": [
            {
                "name": "Column",
                "bits": [
                    0,
                    7
                ],
                "validRange": [
                    [
                        0,
                        255
                    ]
                ]
            },
            {
                "name": "Row",
                "bits": [
                    8,
                    15
                ],
                "validRange": [
                    [
                        0,
                        255
                    ]
                ]
            }
        ],
        "inputs": 0,
        "outputs": 1
    },
    {
        "name": "CONTEXT_ROW",
        "desc": "Inserts a context cell into the stack by reading the column from operand and row from stack",
        "operand": [
            {
                "name": "Column",
                "desc": "context column",
                "bits": [
                    0,
                    7
                ],
                "validRange": [
                    [
                        0,
                        255
                    ]
                ]
            }
        ],
        "inputs": {
            "parameters": [
                {
                    "name": "Row"
                }
            ]
        },
        "outputs": 1
    },
    {
        "name": "DEBUG",
        "desc": "ABI encodes the entire stack and logs it to the hardhat console",
        "operand": [
            {
                "name": "Mode",
                "desc": "debugging mode",
                "bits": [
                    0,
                    0
                ]
            }
        ],
        "inputs": 0,
        "outputs": 0,
        "aliases": [
            "LOG",
            "CONSOLE",
            "CONSOLE_LOG"
        ]
    },
    {
        "name": "DO_WHILE",
        "desc": "Runs a while loop on number of items taken from a stack until a conditions is met",
        "operand": [
            {
                "name": "Inputs",
                "bits": [
                    0,
                    3
                ],
                "validRange": [
                    [
                        1,
                        15
                    ]
                ]
            },
            {
                "name": "Source Index",
                "desc": "index of the source to run",
                "bits": [
                    8,
                    11
                ],
                "validRange": [
                    [
                        0,
                        15
                    ]
                ]
            }
        ],
        "inputs": {
            "bits": [
                0,
                3
            ],
            "parameters": [
                {
                    "name": "Input",
                    "validLength": [
                        [
                            0,
                            14
                        ]
                    ]
                },
                {
                    "name": "Condition",
                    "desc": "condition of while loop"
                }
            ]
        },
        "outputs": {
            "bits": [
                0,
                3
            ]
        },
        "aliases": [
            "WHILE",
            "DOWHILE"
        ]
    },
    {
        "name": "FOLD_CONTEXT",
        "desc": "Performs a looped call over some inputs and some context rows specified by folding a column as start column index and width in operand arguments as length of items in rows",
        "operand": [
            {
                "name": "Inputs",
                "bits": [
                    12,
                    15
                ],
                "validRange": [
                    [
                        0,
                        15
                    ]
                ]
            },
            {
                "name": "Width",
                "desc": "number of columns to loop over",
                "bits": [
                    8,
                    11
                ],
                "validRange": [
                    [
                        0,
                        15
                    ]
                ]
            },
            {
                "name": "Fold Column",
                "desc": "column to base the loop on",
                "bits": [
                    4,
                    7
                ],
                "validRange": [
                    [
                        0,
                        15
                    ]
                ]
            },
            {
                "name": "Source Index",
                "desc": "index of the source to run",
                "bits": [
                    0,
                    3
                ],
                "validRange": [
                    [
                        0,
                        15
                    ]
                ]
            }
        ],
        "inputs": {
            "bits": [
                12,
                15
            ],
            "parameters": [
                {
                    "name": "Input",
                    "validLength": [
                        [
                            0,
                            15
                        ]
                    ]
                }
            ]
        },
        "outputs": {
            "bits": [
                12,
                15
            ]
        },
        "aliases": [
            "FOLDCONTEXT",
            "FOLD"
        ]
    },
    {
        "name": "GET",
        "desc": "Read a key/value pair from contract storage by providing the key and stack the value",
        "operand": [],
        "inputs": {
            "parameters": [
                {
                    "name": "Key",
                    "desc": "the key of the key/value pair"
                }
            ]
        },
        "outputs": 1
    },
    {
        "name": "LOOP_N",
        "desc": "Loop a source n times by taking some items from stack and putting the results back into stack",
        "operand": [
            {
                "name": "Loop Size",
                "desc": "number of loops",
                "bits": [
                    12,
                    15
                ]
            },
            {
                "name": "Inputs",
                "bits": [
                    0,
                    3
                ]
            },
            {
                "name": "Output Size",
                "desc": "number of outputs",
                "bits": [
                    4,
                    7
                ]
            },
            {
                "name": "Source Index",
                "desc": "index of the source to run",
                "bits": [
                    8,
                    11
                ]
            }
        ],
        "inputs": {
            "bits": [
                0,
                3
            ],
            "parameters": [
                {
                    "name": "Input",
                    "validLength": [
                        [
                            0,
                            15
                        ]
                    ]
                }
            ]
        },
        "outputs": {
            "bits": [
                4,
                7
            ]
        },
        "aliases": [
            "LOOP",
            "LOOPN",
            "FOR"
        ]
    },
    {
        "name": "READ_MEMORY",
        "desc": "Takes an item from constants array or from stack items and insert it into the stack",
        "operand": [
            {
                "name": "Type",
                "desc": "type of the read, from constants or stack",
                "bits": [
                    0,
                    0
                ]
            },
            {
                "name": "Index",
                "desc": "index of the item to read",
                "bits": [
                    1,
                    15
                ]
            }
        ],
        "inputs": 0,
        "outputs": 1,
        "aliases": [
            "READ"
        ]
    },
    {
        "name": "SET",
        "desc": "Write a key/value pair taken from stack and write into contract storage",
        "operand": [],
        "inputs": {
            "parameters": [
                {
                    "name": "Key"
                },
                {
                    "name": "Value"
                }
            ]
        },
        "outputs": 0,
        "aliases": [
            "WRITE"
        ]
    },
    {
        "name": "HASH",
        "desc": "Hash (solidity keccak256) value taken from stack and stack the result",
        "operand": [
            {
                "name": "Inputs",
                "bits": [
                    0,
                    7
                ],
                "validRange": [
                    [
                        1,
                        255
                    ]
                ]
            }
        ],
        "inputs": {
            "bits": [
                0,
                7
            ],
            "parameters": [
                {
                    "name": "Input",
                    "validLength": [
                        [
                            1,
                            255
                        ]
                    ]
                }
            ]
        },
        "outputs": 1,
        "aliases": [
            "ENCODE",
            "ENCRYPT"
        ]
    },
    {
        "name": "ERC20_BALANCE_OF",
        "desc": "Get the balance of an ERC20 token of an account and insert it into the stack",
        "operand": [],
        "inputs": {
            "parameters": [
                {
                    "name": "Token Address"
                },
                {
                    "name": "Account"
                }
            ]
        },
        "outputs": 1,
        "aliases": [
            "ERC20_BALANCE_OF",
            "ERC20BALANCEOF",
            "IERC20BALANCEOF"
        ]
    },
    {
        "name": "ERC20_TOTAL_SUPPLY",
        "desc": "Get the supply of an ERC20 token and insert it into the stack",
        "operand": [],
        "inputs": {
            "parameters": [
                {
                    "name": "Token Address"
                }
            ]
        },
        "outputs": 1,
        "aliases": [
            "ERC20TOTALSUPPLY",
            "IERC20TOTALSUPPLY"
        ]
    },
    {
        "name": "ERC20_SNAPSHOT_BALANCE_OF_AT",
        "desc": "Get the snapshot balance of an ERC20 token of an account and insters it into the stack",
        "operand": [],
        "inputs": {
            "parameters": [
                {
                    "name": "Token Address"
                },
                {
                    "name": "Account"
                },
                {
                    "name": "Snapshot Id"
                }
            ]
        },
        "outputs": 1,
        "aliases": [
            "ERC20SNAPSHOTBALANCEOFAT",
            "IERC20SNAPSHOTBALANCEOFAT"
        ]
    },
    {
        "name": "ERC20_SNAPSHOT_TOTAL_SUPPLY_AT",
        "desc": "Get the snapshot supply of an ERC20 token and insert it into the stack",
        "operand": [],
        "inputs": {
            "parameters": [
                {
                    "name": "Token Address"
                },
                {
                    "name": "Snapshot Id"
                }
            ]
        },
        "outputs": 1,
        "aliases": [
            "ERC20SNAPSHOTTOTALSUPPLYAT",
            "IERC20SNAPSHOTTOTALSUPPLYAT"
        ]
    },
    {
        "name": "ERC721_BALANCE_OF",
        "desc": "Get the balance of an ERC721 token of an account and insert it into the stack",
        "operand": [],
        "inputs": {
            "parameters": [
                {
                    "name": "Token Address"
                },
                {
                    "name": "Account"
                }
            ]
        },
        "outputs": 1,
        "aliases": [
            "ERC721BALANCEOF",
            "IERC721BALANCEOF"
        ]
    },
    {
        "name": "ERC721_OWNER_OF",
        "desc": "Get the owner of an ERC20 token of an account and insert it into the stack",
        "operand": [],
        "inputs": {
            "parameters": [
                {
                    "name": "Token Address"
                },
                {
                    "name": "Token Id"
                }
            ]
        },
        "outputs": 1,
        "aliases": [
            "ERC721OWNEROF",
            "IERC721OWNEROF"
        ]
    },
    {
        "name": "ERC1155_BALANCE_OF",
        "desc": "Get the balance of an ERC1155 token of an account and insert it into the stack",
        "operand": [],
        "inputs": {
            "parameters": [
                {
                    "name": "Token Address"
                },
                {
                    "name": "Account"
                },
                {
                    "name": "Token Id"
                }
            ]
        },
        "outputs": 1,
        "aliases": [
            "ERC1155BALANCEOF",
            "IERC1155BALANCEOF"
        ]
    },
    {
        "name": "ERC1155_BALANCE_OF_BATCH",
        "desc": "Get the balances of an ERC1155 token for batches of accounts and token ids and insert it into the stack",
        "operand": [
            {
                "name": "Inputs",
                "bits": [
                    0,
                    7
                ],
                "validRange": [
                    [
                        3,
                        255
                    ]
                ],
                "computation": "(this - 1) / 2"
            }
        ],
        "outputs": {
            "bits": [
                0,
                7
            ]
        },
        "inputs": {
            "bits": [
                0,
                7
            ],
            "computation": "(this * 2) + 1",
            "parameters": [
                {
                    "name": "Token Address"
                },
                {
                    "name": "Account",
                    "validLength": [
                        [
                            1,
                            127
                        ]
                    ],
                    "length": "(this - 1) / 4"
                },
                {
                    "name": "Token Id",
                    "validLength": [
                        [
                            1,
                            127
                        ]
                    ],
                    "length": "(this - 1) / 4"
                }
            ]
        },
        "aliases": [
            "ERC1155BALANCEOFBATCH",
            "IERC1155BALANCEOFBATCH"
        ]
    },
    {
        "name": "ENSURE",
        "desc": "Require ietms(s) of the stack to be true, i.e. greater than zero, revert if not",
        "operand": [
            {
                "name": "Inputs",
                "bits": [
                    0,
                    7
                ],
                "validRange": [
                    [
                        1,
                        255
                    ]
                ]
            }
        ],
        "inputs": {
            "bits": [
                0,
                7
            ],
            "parameters": [
                {
                    "name": "Input",
                    "validLength": [
                        [
                            1,
                            255
                        ]
                    ]
                }
            ]
        },
        "outputs": 0,
        "aliases": [
            "REQUIRE"
        ]
    },
    {
        "name": "BLOCK_NUMBER",
        "desc": "Inserts the current block number into the stack",
        "operand": [],
        "inputs": 0,
        "outputs": 1,
        "aliases": [
            "CURRENT_BLOCK",
            "CURRENTBLOCK",
            "BLOCKNUMBER"
        ]
    },
    {
        "name": "BLOCK_TIMESTAMP",
        "desc": "Insert the current block timestamp into the stack",
        "operand": [],
        "outputs": 1,
        "inputs": 0,
        "aliases": [
            "NOW",
            "BLOCKTIMESTAMP",
            "CURRENTTIME",
            "CURRENT_TIME"
        ]
    },
    {
        "name": "EXPLODE32",
        "desc": "Part an uint256 value into 8 seperate 1 byte size values.",
        "operand": [],
        "inputs": {
            "parameters": [
                {
                    "name": "Value"
                }
            ]
        },
        "outputs": 8,
        "aliases": [
            "EXPLODE"
        ]
    },
    {
        "name": "SCALE18",
        "desc": "Rescale some fixed point number to 18 OOMs in situ.",
        "operand": [
            {
                "name": "Decimals",
                "desc": "decimals of the value to scale to 18",
                "bits": [
                    0,
                    7
                ],
                "validRange": [
                    [
                        1,
                        255
                    ]
                ]
            }
        ],
        "inputs": {
            "parameters": [
                {
                    "name": "Value"
                }
            ]
        },
        "outputs": 1,
        "aliases": [
            "SCALE_18"
        ]
    },
    {
        "name": "SCALE18_DIV",
        "desc": "Inserts the result of dividing the 2 items of the stack by keeping the 18 fixed point decimals into the stack",
        "operand": [
            {
                "name": "Decimals",
                "desc": "decimals of the first value",
                "bits": [
                    0,
                    7
                ],
                "validRange": [
                    [
                        1,
                        255
                    ]
                ]
            }
        ],
        "inputs": {
            "parameters": [
                {
                    "name": "1st Value",
                    "desc": "The first value"
                },
                {
                    "name": "2nd Value",
                    "desc": "The second value"
                }
            ]
        },
        "outputs": 1,
        "aliases": [
            "SCALE18DIV",
            "SCALE_18_DIV"
        ]
    },
    {
        "name": "SCALE18_MUL",
        "desc": "Inserts the result of multiplying the 2 items of the stack by keeping the 18 fixed point decimals into the stack",
        "operand": [
            {
                "name": "Decimals",
                "desc": "decimals of the first value",
                "bits": [
                    0,
                    7
                ],
                "validRange": [
                    [
                        1,
                        255
                    ]
                ]
            }
        ],
        "inputs": {
            "parameters": [
                {
                    "name": "1st Value",
                    "desc": "The first value"
                },
                {
                    "name": "2nd Value",
                    "desc": "The second value"
                }
            ]
        },
        "outputs": 1,
        "aliases": [
            "SCALE18MUL",
            "SCALE_18_MUL"
        ]
    },
    {
        "name": "SCALE_BY",
        "desc": "Scale a fixed point up or down by opernad.",
        "operand": [
            {
                "name": "Scale",
                "desc": "determines the up/down scale as 2s complement",
                "bits": [
                    0,
                    7
                ]
            }
        ],
        "inputs": {
            "parameters": [
                {
                    "name": "Value",
                    "desc": "The value to scale by"
                }
            ]
        },
        "outputs": 1,
        "aliases": [
            "SCALEBY"
        ]
    },
    {
        "name": "SCALEN",
        "desc": "Rescale an 18 OOMs fixed point number to scale N.",
        "operand": [
            {
                "name": "Target Decimals",
                "desc": "the target decimals to scale to",
                "bits": [
                    0,
                    7
                ],
                "validRange": [
                    [
                        1,
                        255
                    ]
                ]
            }
        ],
        "inputs": {
            "parameters": [
                {
                    "name": "Value",
                    "desc": "The value to scale to N"
                }
            ]
        },
        "outputs": 1,
        "aliases": [
            "SCALE_N"
        ]
    },
    {
        "name": "ANY",
        "desc": "Inserts the first non-zero value of all the values it checks if there exists one, else inserts zero into the stack.",
        "operand": [
            {
                "name": "Inputs",
                "bits": [
                    0,
                    7
                ],
                "validRange": [
                    [
                        2,
                        255
                    ]
                ]
            }
        ],
        "inputs": {
            "bits": [
                0,
                7
            ],
            "parameters": [
                {
                    "name": "Input",
                    "validLength": [
                        [
                            2,
                            255
                        ]
                    ]
                }
            ]
        },
        "outputs": 1,
        "aliases": [
            "OR",
            "|"
        ]
    },
    {
        "name": "EAGER_IF",
        "desc": "Takes 3 items from the stack and check if the first item is non-zero the inserts the second item into the stack, else inserts the 3rd item",
        "operand": [],
        "inputs": {
            "parameters": [
                {
                    "name": "Condition",
                    "desc": "The condition to evaluate"
                },
                {
                    "name": "Pass Statement",
                    "desc": "The value to stack if the condition is non-zero/true"
                },
                {
                    "name": "Fail Statement",
                    "desc": "The value to stack if the condition is zero/false"
                }
            ]
        },
        "outputs": 1,
        "aliases": [
            "EAGERIF",
            "IF"
        ]
    },
    {
        "name": "EQUAL_TO",
        "desc": "Comapres the last 2 items of the stack together and inserts true/1 into stack if they are euqal, else inserts false/0",
        "operand": [],
        "inputs": {
            "parameters": [
                {
                    "name": "1st Value"
                },
                {
                    "name": "2nd Value2"
                }
            ]
        },
        "outputs": 1,
        "aliases": [
            "EQ",
            "EQUALTO",
            "=="
        ]
    },
    {
        "name": "EVERY",
        "desc": "Inserts the first value of all the values it checks if all of them are non-zero, else inserts zero into the stack.",
        "operand": [
            {
                "name": "Inputs",
                "bits": [
                    0,
                    7
                ],
                "validRange": [
                    [
                        2,
                        255
                    ]
                ]
            }
        ],
        "inputs": {
            "bits": [
                0,
                7
            ],
            "parameters": [
                {
                    "name": "Input",
                    "validLength": [
                        [
                            2,
                            255
                        ]
                    ]
                }
            ]
        },
        "outputs": 1,
        "aliases": [
            "AND",
            "&"
        ]
    },
    {
        "name": "GREATER_THAN",
        "desc": "Takes last 2 values from stack and puts true/1 into the stack if the first value is greater than the second value and false/0 if not.",
        "operand": [],
        "inputs": {
            "parameters": [
                {
                    "name": "1st Value"
                },
                {
                    "name": "2nd Value2"
                }
            ]
        },
        "outputs": 1,
        "aliases": [
            "GT",
            "GREATERTHAN",
            "BIGGERTHAN",
            "BIGGER_THAN",
            ">"
        ]
    },
    {
        "name": "ISZERO",
        "desc": "Checks if the value is zero and inserts true/1 into the stack if it is, else inserts false/0",
        "operand": [],
        "inputs": {
            "parameters": [
                {
                    "name": "Value"
                }
            ]
        },
        "outputs": 1,
        "aliases": [
            "IS_ZERO",
            "FALSE",
            "IS_FALSE",
            "ISFALSE"
        ]
    },
    {
        "name": "LESS_THAN",
        "desc": "Takes last 2 values from stack and puts true/1 into the stack if the first value is less than the second value and false/0 if not.",
        "operand": [],
        "outputs": 1,
        "inputs": {
            "parameters": [
                {
                    "name": "1st Value"
                },
                {
                    "name": "2nd Value"
                }
            ]
        },
        "aliases": [
            "LT",
            "LESSTHAN",
            "LITTLETHAN",
            "LITTLE_THAN",
            "<"
        ]
    },
    {
        "name": "SATURATING_ADD",
        "desc": "Inserts sum of the specified items from the stack and if prevernts reverts if the result goes above max 256 bit size",
        "operand": [
            {
                "name": "Inputs",
                "bits": [
                    0,
                    7
                ],
                "validRange": [
                    [
                        2,
                        255
                    ]
                ]
            }
        ],
        "inputs": {
            "bits": [
                0,
                7
            ],
            "parameters": [
                {
                    "name": "Input",
                    "validLength": [
                        [
                            2,
                            255
                        ]
                    ]
                }
            ]
        },
        "outputs": 1,
        "aliases": [
            "SATURATINGADD",
            "SAT_ADD",
            "SATADD",
            "SATURATING_SUM",
            "SATURATINGSUM",
            "SATSUM",
            "SAT_SUM"
        ]
    },
    {
        "name": "SATURATING_MUL",
        "desc": "Inserts multiplied result of the specified items from the stack and if prevernts reverts if the result goes above max 256 bit size",
        "operand": [
            {
                "name": "Inputs",
                "bits": [
                    0,
                    7
                ],
                "validRange": [
                    [
                        2,
                        255
                    ]
                ]
            }
        ],
        "inputs": {
            "bits": [
                0,
                7
            ],
            "parameters": [
                {
                    "name": "Input",
                    "validLength": [
                        [
                            2,
                            255
                        ]
                    ]
                }
            ]
        },
        "outputs": 1,
        "aliases": [
            "SATURATINGMUL",
            "SAT_MUL",
            "SATMUL"
        ]
    },
    {
        "name": "SATURATING_SUB",
        "desc": "Inserts subtraction of the specified items from the stack and if prevernts reverts if the result goes blow zero",
        "operand": [
            {
                "name": "Inputs",
                "bits": [
                    0,
                    7
                ],
                "validRange": [
                    [
                        2,
                        255
                    ]
                ]
            }
        ],
        "inputs": {
            "bits": [
                0,
                7
            ],
            "parameters": [
                {
                    "name": "Input",
                    "validLength": [
                        [
                            2,
                            255
                        ]
                    ]
                }
            ]
        },
        "outputs": 1,
        "aliases": [
            "SATURATINGSUB",
            "SAT_SUB",
            "SATSUB",
            "SATURATING_MINUS",
            "SATURATINGMINUS",
            "SATMINUS",
            "SAT_MINUS"
        ]
    },
    {
        "name": "ADD",
        "desc": "Inserts the result of sum of N values taken from the stack into the stack",
        "operand": [
            {
                "name": "Inputs",
                "bits": [
                    0,
                    7
                ],
                "validRange": [
                    [
                        2,
                        255
                    ]
                ]
            }
        ],
        "inputs": {
            "bits": [
                0,
                7
            ],
            "parameters": [
                {
                    "name": "Input",
                    "validLength": [
                        [
                            2,
                            255
                        ]
                    ]
                }
            ]
        },
        "outputs": 1,
        "aliases": [
            "+",
            "SUM"
        ]
    },
    {
        "name": "DIV",
        "desc": "Inserts the result of divide of N values taken from the stack into the stack",
        "operand": [
            {
                "name": "Inputs",
                "bits": [
                    0,
                    7
                ],
                "validRange": [
                    [
                        2,
                        255
                    ]
                ]
            }
        ],
        "inputs": {
            "bits": [
                0,
                7
            ],
            "parameters": [
                {
                    "name": "Input",
                    "validLength": [
                        [
                            2,
                            255
                        ]
                    ]
                }
            ]
        },
        "outputs": 1,
        "aliases": [
            "/",
            "÷",
            "DIVIDE"
        ]
    },
    {
        "name": "EXP",
        "desc": "Inserts the result of exponention of N values taken from the stack into the stack",
        "operand": [
            {
                "name": "Inputs",
                "bits": [
                    0,
                    7
                ],
                "validRange": [
                    [
                        2,
                        255
                    ]
                ]
            }
        ],
        "inputs": {
            "bits": [
                0,
                7
            ],
            "parameters": [
                {
                    "name": "Input",
                    "validLength": [
                        [
                            2,
                            255
                        ]
                    ]
                }
            ]
        },
        "outputs": 1,
        "aliases": [
            "^",
            "POW",
            "POWER",
            "EXPONENTION"
        ]
    },
    {
        "name": "MAX",
        "desc": "Inserts the maximum of N values taken from the stack into the stack",
        "operand": [
            {
                "name": "Inputs",
                "bits": [
                    0,
                    7
                ],
                "validRange": [
                    [
                        2,
                        255
                    ]
                ]
            }
        ],
        "inputs": {
            "bits": [
                0,
                7
            ],
            "parameters": [
                {
                    "name": "Input",
                    "validLength": [
                        [
                            2,
                            255
                        ]
                    ]
                }
            ]
        },
        "outputs": 1,
        "aliases": [
            "MAXIMUM",
            "MAX_OF",
            "MAXOF"
        ]
    },
    {
        "name": "MIN",
        "desc": "Inserts the minimum of N values taken from the stack into the stack",
        "operand": [
            {
                "name": "Inputs",
                "bits": [
                    0,
                    7
                ],
                "validRange": [
                    [
                        2,
                        255
                    ]
                ]
            }
        ],
        "inputs": {
            "bits": [
                0,
                7
            ],
            "parameters": [
                {
                    "name": "Input",
                    "validLength": [
                        [
                            2,
                            255
                        ]
                    ]
                }
            ]
        },
        "outputs": 1,
        "aliases": [
            "MINIMUM",
            "MIN_OF",
            "MINOF"
        ]
    },
    {
        "name": "MOD",
        "desc": "Inserts the mod of N values taken from the stack into the stack",
        "operand": [
            {
                "name": "Inputs",
                "bits": [
                    0,
                    7
                ],
                "validRange": [
                    [
                        2,
                        255
                    ]
                ]
            }
        ],
        "inputs": {
            "bits": [
                0,
                7
            ],
            "parameters": [
                {
                    "name": "Input",
                    "validLength": [
                        [
                            2,
                            255
                        ]
                    ]
                }
            ]
        },
        "outputs": 1,
        "aliases": [
            "%"
        ]
    },
    {
        "name": "MUL",
        "desc": "Inserts the multiplication of N values taken from the stack into the stack",
        "operand": [
            {
                "name": "Inputs",
                "bits": [
                    0,
                    7
                ],
                "validRange": [
                    [
                        2,
                        255
                    ]
                ]
            }
        ],
        "inputs": {
            "bits": [
                0,
                7
            ],
            "parameters": [
                {
                    "name": "Input",
                    "validLength": [
                        [
                            2,
                            255
                        ]
                    ]
                }
            ]
        },
        "outputs": 1,
        "aliases": [
            "*",
            "X"
        ]
    },
    {
        "name": "SUB",
        "desc": "Inserts the subtraction of N values taken from the stack into the stack",
        "operand": [
            {
                "name": "Inputs",
                "bits": [
                    0,
                    7
                ],
                "validRange": [
                    [
                        2,
                        255
                    ]
                ]
            }
        ],
        "inputs": {
            "bits": [
                0,
                7
            ],
            "parameters": [
                {
                    "name": "Input",
                    "validLength": [
                        [
                            2,
                            255
                        ]
                    ]
                }
            ]
        },
        "outputs": 1,
        "aliases": [
            "MINUS",
            "-"
        ]
    },
    {
        "name": "IORDERBOOKV1_VAULT_BALANCE",
        "desc": "The balance of an orderbook vault",
        "operand": [],
        "inputs": {
            "parameters": [
                {
                    "name": "Orderbook Address",
                    "desc": "The address of the IOrderbookV2"
                },
                {
                    "name": "Owner Address",
                    "desc": "The address of the Owner of the vault"
                },
                {
                    "name": "Token Address",
                    "desc": "The address of the Token"
                },
                {
                    "name": "Vault ID"
                }
            ]
        },
        "outputs": 1,
        "aliases": [
            "VAULTBALANCE",
            "VAULT_BALANCE"
        ]
    },
    {
        "name": "ISALEV2_REMAINING_TOKEN_INVENTORY",
        "desc": "The remaining rTKNs left to to be sold",
        "operand": [],
        "inputs": {
            "parameters": [
                {
                    "name": "ISale Address"
                }
            ]
        },
        "outputs": 1,
        "aliases": [
            "REMAINING_UNITS"
        ]
    },
    {
        "name": "ISALEV2_RESERVE",
        "desc": "The reserve token address",
        "operand": [],
        "inputs": {
            "parameters": [
                {
                    "name": "ISale Address"
                }
            ]
        },
        "outputs": 1,
        "aliases": [
            "RESERVE",
            "RESERVE_TOKEN",
            "RESERVETOKEN"
        ]
    },
    {
        "name": "ISALEV2_SALE_STATUS",
        "desc": "Insert the status of a Sale contract into the stack by taking its address from the stack",
        "operand": [],
        "inputs": {
            "parameters": [
                {
                    "name": "ISale Address"
                }
            ]
        },
        "outputs": 1,
        "aliases": [
            "SALE_STATUS",
            "SALESTATUS"
        ]
    },
    {
        "name": "ISALEV2_TOKEN",
        "desc": "The rTKN address",
        "operand": [],
        "inputs": {
            "parameters": [
                {
                    "name": "ISale Address"
                }
            ]
        },
        "outputs": 1,
        "aliases": [
            "RTKN",
            "TOKEN",
            "REDEEMABLE_TOKEN"
        ]
    },
    {
        "name": "ISALEV2_TOTAL_RESERVE_RECEIVED",
        "desc": "The total amount of reserve tokens received by the sale",
        "operand": [],
        "inputs": {
            "parameters": [
                {
                    "name": "ISale Address"
                }
            ]
        },
        "outputs": 1,
        "aliases": [
            "TOTAL_RAISED"
        ]
    },
    {
        "name": "IVERFYV1_ACCOUNT_STATUS_AT_TIME",
        "desc": "Read and put the status of an account from the verify v1 contract into the stack",
        "operand": [],
        "outputs": 1,
        "inputs": {
            "parameters": [
                {
                    "name": "IVerifyV1 Address"
                },
                {
                    "name": "Account Address"
                }
            ]
        },
        "aliases": [
            "VERIFY_STATUS",
            "VERIFYSTATUS"
        ]
    },
    {
        "name": "ITIERV2_REPORT",
        "desc": "Inserts the report of an account of a tier contract and optionally contexts which are taken from the stack into the stack",
        "operand": [
            {
                "name": "Inputs",
                "bits": [
                    0,
                    7
                ],
                "validRange": [
                    [
                        2
                    ],
                    [
                        3
                    ],
                    [
                        10
                    ]
                ],
                "computation": "this - 2"
            }
        ],
        "inputs": {
            "bits": [
                0,
                7
            ],
            "parameters": [
                {
                    "name": "ITierV2 Address"
                },
                {
                    "name": "Account"
                },
                {
                    "name": "Context",
                    "desc": "The contextual values",
                    "validLength": [
                        [
                            0
                        ],
                        [
                            1
                        ],
                        [
                            8
                        ]
                    ]
                }
            ]
        },
        "outputs": 1,
        "aliases": [
            "REPORT",
            "ITIERV2REPORT",
            "TIERREPORT",
            "TIER_REPORT",
            "ITIERREPORT",
            "ITIER_REPORT"
        ]
    },
    {
        "name": "ITIERV2_REPORT_TIME_FOR_TIER",
        "desc": "Inserts the specified tier level report of an account of a tier contract and optionally contexts which are taken from the stack into the stack",
        "operand": [
            {
                "name": "Inputs",
                "bits": [
                    0,
                    7
                ],
                "validRange": [
                    [
                        3
                    ],
                    [
                        4
                    ],
                    [
                        11
                    ]
                ],
                "computation": "this - 3"
            }
        ],
        "inputs": {
            "bits": [
                0,
                7
            ],
            "parameters": [
                {
                    "name": "ITierV2 Address"
                },
                {
                    "name": "Account"
                },
                {
                    "name": "Tier"
                },
                {
                    "name": "Context",
                    "desc": "The contextual values",
                    "validLength": [
                        [
                            0
                        ],
                        [
                            1
                        ],
                        [
                            8
                        ]
                    ]
                }
            ]
        },
        "outputs": 1,
        "aliases": [
            "ITIERV2REPORTTIMEFORTIER",
            "SINGLE_REPORT",
            "SINGLEREPORT",
            "SINGLE_TIER_REPORT",
            "SINGLETIERREPORT"
        ]
    },
    {
        "name": "SATURATING_DIFF",
        "desc": "Inserts the saturating difference of 2 reports taken from the stack into the stack and prevents reverts if the result below zero",
        "operand": [],
        "inputs": {
            "parameters": [
                {
                    "name": "1st Value"
                },
                {
                    "name": "2nd Value2"
                }
            ]
        },
        "outputs": 1,
        "aliases": [
            "SAT_DIFF",
            "SATDIFF",
            "SATURATINGDIFF"
        ]
    },
    {
        "name": "SELECT_LTE",
        "desc": "Inserts the result of selecting the less than equal to specified value taken from stack among number of reports by a logic and mode into the stack",
        "operand": [
            {
                "name": "Logic",
                "desc": "select lte logic: every or any logic",
                "bits": [
                    13,
                    13
                ]
            },
            {
                "name": "Mode",
                "desc": "select lte mode: min, max or first",
                "bits": [
                    8,
                    9
                ],
                "validRange": [
                    [
                        0,
                        2
                    ]
                ]
            },
            {
                "name": "Inputs",
                "bits": [
                    0,
                    7
                ],
                "validRange": [
                    [
                        1,
                        255
                    ]
                ]
            }
        ],
        "inputs": {
            "bits": [
                0,
                7
            ],
            "parameters": [
                {
                    "name": "Referrence Timestamp",
                    "desc": "The timestamp to check the tier reports against"
                },
                {
                    "name": "Report",
                    "desc": "The report to selectLte from",
                    "validLength": [
                        [
                            1,
                            254
                        ]
                    ]
                }
            ]
        },
        "outputs": 1,
        "aliases": [
            "SELECTLTE",
            "SELECT"
        ]
    },
    {
        "name": "UPDATE_TIMES_FOR_TIER_RANGE",
        "desc": "Inserts the result of updating the range of tiers of a report taken from stack by a value taken from the stack into the stack",
        "operand": [
            {
                "name": "Start Tier",
                "desc": "the starting tier to update",
                "bits": [
                    0,
                    3
                ],
                "validRange": [
                    [
                        0,
                        8
                    ]
                ]
            },
            {
                "name": "End Tier",
                "desc": "the ending tier to update",
                "bits": [
                    4,
                    7
                ],
                "validRange": [
                    [
                        0,
                        8
                    ]
                ]
            }
        ],
        "inputs": {
            "parameters": [
                {
                    "name": "Update Timestamp",
                    "desc": "the timestamp to update tier range to"
                },
                {
                    "name": "Report",
                    "desc": "the report to update its tier range"
                }
            ]
        },
        "outputs": 1,
        "aliases": [
            "UPDATETIMESFORTIERRANGE",
            "UPDATE_TIER_RANGE",
            "UPDATETIERRANGE",
            "UPDATE_TIERS",
            "UPDATETIERS",
            "UPDATE_REPORT",
            "UPDATEREPORT"
        ]
    }
]