{
    "language": "Solidity",
    "sources": {
        "./contracts/libraries/TierUtil.sol": {
            "content": "// SPDX-License-Identifier: CAL\n\npragma solidity 0.6.12;\n\nimport { ITier } from \"../tier/ITier.sol\";\n\n/// @title TierUtil\n/// @notice `TierUtil` implements several pure functions that can be\n/// used to interface with reports.\n/// - `tierAtBlockFromReport`: Returns the highest status achieved relative to\n/// a block number and report. Statuses gained after that block are ignored.\n/// - `tierBlock`: Returns the block that a given tier has been held\n/// since according to a report.\n/// - `truncateTiersAbove`: Resets all the tiers above the reference tier.\n/// - `updateBlocksForTierRange`: Updates a report with a block\n/// number for every tier in a range.\n/// - `updateReportWithTierAtBlock`: Updates a report to a new tier.\n/// @dev Utilities to consistently read, write and manipulate tiers in reports.\n/// The low-level bit shifting can be difficult to get right so this factors\n/// that out.\nlibrary TierUtil {\n\n    /// UNINITIALIZED report is 0xFF.. as no tier has been held.\n    uint256 constant public UNINITIALIZED = uint256(-1);\n\n    /// Returns the highest tier achieved relative to a block number\n    /// and report.\n    ///\n    /// Note that typically the report will be from the _current_ contract\n    /// state, i.e. `block.number` but not always. Tiers gained after the\n    /// reference block are ignored.\n    ///\n    /// When the `report` comes from a later block than the `blockNumber` this\n    /// means the user must have held the tier continuously from `blockNumber`\n    /// _through_ to the report block.\n    /// I.e. NOT a snapshot.\n    ///\n    /// @param report_ A report as per `ITier`.\n    /// @param blockNumber_ The block number to check the tiers against.\n    /// @return The highest tier held since `blockNumber` as per `report`.\n    function tierAtBlockFromReport(\n        uint256 report_,\n        uint256 blockNumber_\n    )\n        internal pure returns (ITier.Tier)\n    {\n        for (uint256 i_ = 0; i_ < 8; i_++) {\n            if (uint32(uint256(report_ >> (i_*32))) > uint32(blockNumber_)) {\n                return ITier.Tier(i_);\n            }\n        }\n        return ITier.Tier(8);\n    }\n\n    /// Returns the block that a given tier has been held since from a report.\n    ///\n    /// The report MUST encode \"never\" as 0xFFFFFFFF. This ensures\n    /// compatibility with `tierAtBlockFromReport`.\n    ///\n    /// @param report_ The report to read a block number from.\n    /// @param tier_ The Tier to read the block number for.\n    /// @return The block number this has been held since.\n    function tierBlock(uint256 report_, ITier.Tier tier_)\n        internal\n        pure\n        returns (uint256)\n    {\n        // ZERO is a special case. Everyone has always been at least ZERO,\n        // since block 0.\n        if (tier_ == ITier.Tier.ZERO) { return 0; }\n\n        uint256 offset_ = (uint256(tier_) - 1) * 32;\n        return uint256(uint32(\n            uint256(\n                report_ >> offset_\n            )\n        ));\n    }\n\n    /// Resets all the tiers above the reference tier to 0xFFFFFFFF.\n    ///\n    /// @param report_ Report to truncate with high bit 1s.\n    /// @param tier_ Tier to truncate above (exclusive).\n    /// @return Truncated report.\n    function truncateTiersAbove(uint256 report_, ITier.Tier tier_)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint256 offset_ = uint256(tier_) * 32;\n        uint256 mask_ = (UNINITIALIZED >> offset_) << offset_;\n        return report_ | mask_;\n    }\n\n    /// Updates a report with a block number for every status integer in a\n    /// range.\n    ///\n    /// Does nothing if the end status is equal or less than the start status.\n    /// @param report_ The report to update.\n    /// @param startTier_ The `Tier` at the start of the range (exclusive).\n    /// @param endTier_ The `Tier` at the end of the range (inclusive).\n    /// @param blockNumber_ The block number to set for every status\n    /// in the range.\n    /// @return The updated report.\n    function updateBlocksForTierRange(\n        uint256 report_,\n        ITier.Tier startTier_,\n        ITier.Tier endTier_,\n        uint256 blockNumber_\n    )\n        internal pure returns (uint256)\n    {\n        uint256 offset_;\n        for (uint256 i_ = uint256(startTier_); i_ < uint256(endTier_); i_++) {\n            offset_ = i_ * 32;\n            report_ =\n                (report_ & ~uint256(uint256(uint32(UNINITIALIZED)) << offset_))\n                | uint256(blockNumber_ << offset_);\n        }\n        return report_;\n    }\n\n    /// Updates a report to a new status.\n    ///\n    /// Internally dispatches to `truncateTiersAbove` and\n    /// `updateBlocksForTierRange`.\n    /// The dispatch is based on whether the new tier is above or below the\n    /// current tier.\n    /// The `startTier_` MUST match the result of `tierAtBlockFromReport`.\n    /// It is expected the caller will know the current tier when\n    /// calling this function and need to do other things in the calling scope\n    /// with it.\n    ///\n    /// @param report_ The report to update.\n    /// @param startTier_ The tier to start updating relative to. Data above\n    /// this tier WILL BE LOST so probably should be the current tier.\n    /// @param endTier_ The new highest tier held, at the given block number.\n    /// @param blockNumber_ The block number to update the highest tier to, and\n    /// intermediate tiers from `startTier_`.\n    /// @return The updated report.\n    function updateReportWithTierAtBlock(\n        uint256 report_,\n        ITier.Tier startTier_,\n        ITier.Tier endTier_,\n        uint256 blockNumber_\n    )\n        internal pure returns (uint256)\n    {\n        return endTier_ < startTier_\n            ? truncateTiersAbove(report_, endTier_)\n            : updateBlocksForTierRange(\n                report_,\n                startTier_,\n                endTier_,\n                blockNumber_\n            );\n    }\n\n}"
        },
        "./contracts/tier/ITier.sol": {
            "content": "// SPDX-License-Identifier: CAL\n\npragma solidity 0.6.12;\n\n/// @title ITier\n/// @notice `ITier` is a simple interface that contracts can\n/// implement to provide membership lists for other contracts.\n///\n/// There are many use-cases for a time-preserving,\n/// conditional membership list.\n///\n/// Some examples include:\n///\n/// - Self-serve whitelist to participate in fundraising\n/// - Lists of users who can claim airdrops and perks\n/// - Pooling resources with implied governance/reward tiers\n/// - POAP style attendance proofs allowing access to future exclusive events\n///\n/// @dev Standard interface to a tiered membership.\n///\n/// A \"membership\" can represent many things:\n/// - Exclusive access.\n/// - Participation in some event or process.\n/// - KYC completion.\n/// - Combination of sub-memberships.\n/// - Etc.\n///\n/// The high level requirements for a contract implementing `ITier`:\n/// - MUST represent held tiers with the `Tier` enum.\n/// - MUST implement `report`.\n///   - The report is a `uint256` that SHOULD represent the block each tier has\n///     been continuously held since encoded as `uint32`.\n///   - The encoded tiers start at ONE; ZERO is implied if no tier has ever\n///     been held.\n///   - `Tier.ZERO` is NOT encoded in the report, it is simply the fallback\n///     value.\n///   - If a tier is lost the block data is erased for that tier and will be\n///     set if/when the tier is regained to the new block.\n///   - If the historical block information is not available the report MAY\n///     return `0x00000000` for all held tiers.\n///   - Tiers that are lost or have never been held MUST return `0xFFFFFFFF`.\n/// - SHOULD implement `setTier`.\n///   - Contracts SHOULD revert with `SET_TIER` error if they cannot\n///     meaningfully set a tier directly.\n///     For example a contract that can only derive a membership tier by\n///     reading the state of an external contract cannot set tiers.\n///   - Contracts implementing `setTier` SHOULD error with `SET_ZERO_TIER`\n///     if `Tier.ZERO` is being set.\n/// - MUST emit `TierChange` when `setTier` successfully writes a new tier.\n///   - Contracts that cannot meaningfully set a tier are exempt.\ninterface ITier {\n    /// 9 Possible tiers.\n    /// Fits nicely as uint32 in uint256 which is helpful for internal storage\n    /// concerns.\n    /// 8 tiers can be achieved, ZERO is the tier when no tier has been\n    /// achieved.\n    enum Tier {\n        ZERO,\n        ONE,\n        TWO,\n        THREE,\n        FOUR,\n        FIVE,\n        SIX,\n        SEVEN,\n        EIGHT\n    }\n\n    /// Every time a Tier changes we log start and end Tier against the\n    /// account.\n    /// This MAY NOT be emitted if reports are being read from the state of an\n    /// external contract.\n    event TierChange(\n        address indexed account,\n        Tier indexed startTier,\n        Tier indexed endTier\n    );\n\n    /// @notice Users can set their own tier by calling `setTier`.\n    ///\n    /// The contract that implements `ITier` is responsible for checking\n    /// eligibility and/or taking actions required to set the tier.\n    ///\n    /// For example, the contract must take/refund any tokens relevant to\n    /// changing the tier.\n    ///\n    /// Obviously the user is responsible for any approvals for this action\n    /// prior to calling `setTier`.\n    ///\n    /// When the tier is changed a `TierChange` event will be emmited as:\n    /// ```\n    /// event TierChange(address account, Tier startTier, Tier endTier);\n    /// ```\n    ///\n    /// The `setTier` function includes arbitrary data as the third\n    /// parameter. This can be used to disambiguate in the case that\n    /// there may be many possible options for a user to achieve some tier.\n    ///\n    /// For example, consider the case where `Tier.THREE` can be achieved\n    /// by EITHER locking 1x rare NFT or 3x uncommon NFTs. A user with both\n    /// could use `data` to explicitly state their intent.\n    ///\n    /// NOTE however that _any_ address can call `setTier` for any other\n    /// address.\n    ///\n    /// If you implement `data` or anything that changes state then be very\n    /// careful to avoid griefing attacks.\n    ///\n    /// The `data` parameter can also be ignored by the contract implementing\n    /// `ITier`. For example, ERC20 tokens are fungible so only the balance\n    /// approved by the user is relevant to a tier change.\n    ///\n    /// The `setTier` function SHOULD prevent users from reassigning\n    /// `Tier.ZERO` to themselves.\n    ///\n    /// The `Tier.ZERO` status represents never having any status.\n    /// @dev Updates the tier of an account.\n    ///\n    /// The implementing contract is responsible for all checks and state\n    /// changes required to set the tier. For example, taking/refunding\n    /// funds/NFTs etc.\n    ///\n    /// Contracts may disallow directly setting tiers, preferring to derive\n    /// reports from other onchain data.\n    /// In this case they should `revert(\"SET_TIER\");`.\n    ///\n    /// @param account Account to change the tier for.\n    /// @param endTier Tier after the change.\n    /// @param data Arbitrary input to disambiguate ownership\n    /// (e.g. NFTs to lock).\n    function setTier(\n        address account,\n        Tier endTier,\n        bytes memory data\n    )\n        external;\n\n    /// @notice A tier report is a `uint256` that contains each of the block\n    /// numbers each tier has been held continously since as a `uint32`.\n    /// There are 9 possible tier, starting with `Tier.ZERO` for `0` offset or\n    /// \"never held any tier\" then working up through 8x 4 byte offsets to the\n    /// full 256 bits.\n    ///\n    /// Low bits = Lower tier.\n    ///\n    /// In hexadecimal every 8 characters = one tier, starting at `Tier.EIGHT`\n    /// from high bits and working down to `Tier.ONE`.\n    ///\n    /// `uint32` should be plenty for any blockchain that measures block times\n    /// in seconds, but reconsider if deploying to an environment with\n    /// significantly sub-second block times.\n    ///\n    /// ~135 years of 1 second blocks fit into `uint32`.\n    ///\n    /// `2^8 / (365 * 24 * 60 * 60)`\n    ///\n    /// When a user INCREASES their tier they keep all the block numbers they\n    /// already had, and get new block times for each increased tiers they have\n    /// earned.\n    ///\n    /// When a user DECREASES their tier they return to `0xFFFFFFFF` (never)\n    /// for every tier level they remove, but keep their block numbers for the\n    /// remaining tiers.\n    ///\n    /// GUIs are encouraged to make this dynamic very clear for users as\n    /// round-tripping to a lower status and back is a DESTRUCTIVE operation\n    /// for block times.\n    ///\n    /// The intent is that downstream code can provide additional benefits for\n    /// members who have maintained a certain tier for/since a long time.\n    /// These benefits can be provided by inspecting the report, and by\n    /// on-chain contracts directly,\n    /// rather than needing to work with snapshots etc.\n    /// @dev Returns the earliest block the account has held each tier for\n    /// continuously.\n    /// This is encoded as a uint256 with blocks represented as 8x\n    /// concatenated uint32.\n    /// I.e. Each 4 bytes of the uint256 represents a u32 tier start time.\n    /// The low bits represent low tiers and high bits the high tiers.\n    /// Implementing contracts should return 0xFFFFFFFF for lost &\n    /// never-held tiers.\n    ///\n    /// @param account Account to get the report for.\n    /// @return The report blocks encoded as a uint256.\n    function report(address account) external view returns (uint256);\n}"
        }
    },
    "settings": {
        "metadata": {
            "useLiteralContent": true
        },
        "optimizer": {
            "enabled": true,
            "runs": 100000
        },
        "outputSelection": {
            "*": {
                "*": [
                    "abi",
                    "evm.bytecode",
                    "evm.deployedBytecode",
                    "evm.methodIdentifiers"
                ],
                "": [
                    "id",
                    "ast"
                ]
            }
        }
    }
}