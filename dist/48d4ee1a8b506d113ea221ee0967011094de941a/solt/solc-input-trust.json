{
    "language": "Solidity",
    "sources": {
        "./contracts/trust/Trust.sol": {
            "content": "// SPDX-License-Identifier: CAL\npragma solidity ^0.6.12;\n\npragma experimental ABIEncoderV2;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\" as ERC20;\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/math/Math.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {\n    ReentrancyGuard\n} from \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport { SafeERC20 } from \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\n\nimport { ITier } from \"../tier/ITier.sol\";\n\nimport { Phase } from \"../phased/Phased.sol\";\nimport {\n    RedeemableERC20,\n    RedeemableERC20Config\n} from \"../redeemableERC20/RedeemableERC20.sol\";\nimport {\n    RedeemableERC20Pool, RedeemableERC20PoolConfig\n} from \"../pool/RedeemableERC20Pool.sol\";\nimport { SeedERC20, SeedERC20Config } from \"../seed/SeedERC20.sol\";\nimport {\n    RedeemableERC20Factory\n} from \"../redeemableERC20/RedeemableERC20Factory.sol\";\nimport {\n    RedeemableERC20PoolFactory,\n    RedeemableERC20PoolFactoryRedeemableERC20PoolConfig\n} from \"../pool/RedeemableERC20PoolFactory.sol\";\nimport {\n    SeedERC20Factory\n} from \"../seed/SeedERC20Factory.sol\";\n\n/// Summary of every contract built or referenced internally by `Trust`.\nstruct TrustContracts {\n    // Reserve erc20 token used to provide value to the created Balancer pool.\n    address reserveERC20;\n    // Redeemable erc20 token that is minted and distributed.\n    address redeemableERC20;\n    // Contract that builds, starts and exits the balancer pool.\n    address redeemableERC20Pool;\n    // Address that provides the initial reserve token seed.\n    address seeder;\n    // Address that defines and controls tier levels for users.\n    address tier;\n    // The Balancer `ConfigurableRightsPool` deployed for this distribution.\n    address crp;\n    // The Balancer pool that holds and trades tokens during the distribution.\n    address pool;\n}\n\n/// High level state of the distribution.\n/// An amalgamation of the phases and states of the internal contracts.\nenum DistributionStatus {\n    // Trust is created but does not have reserve funds required to start the\n    // distribution.\n    Pending,\n    // Trust has enough reserve funds to start the distribution.\n    Seeded,\n    // The balancer pool is funded and trading.\n    Trading,\n    // The last block of the balancer pool gradual weight changes is in the\n    // past.\n    TradingCanEnd,\n    // The balancer pool liquidity has been removed and distribution is\n    // successful.\n    Success,\n    // The balancer pool liquidity has been removed and distribution is a\n    // failure.\n    Fail\n}\n\n/// High level stats of the current state of the distribution.\n/// Includes the `DistributionStatus` and key configuration and metrics.\nstruct DistributionProgress {\n    // `DistributionStatus` as above.\n    DistributionStatus distributionStatus;\n    // First block that the distribution can be traded.\n    // Will be `-1` before trading.\n    uint32 distributionStartBlock;\n    // First block that the distribution can be ended.\n    // Will be `-1` before trading.\n    uint32 distributionEndBlock;\n    // Current reserve balance in the Balancer pool.\n    // Will be `0` before trading.\n    // Will be the exit dust after trading.\n    uint256 poolReserveBalance;\n    // Current token balance in the Balancer pool.\n    // Will be `0` before trading.\n    // Will be `0` after distribution due to burn.\n    uint256 poolTokenBalance;\n    // Initial reserve used to build the Balancer pool.\n    uint256 reserveInit;\n    // Minimum creator reserve value for the distribution to succeed.\n    uint256 minimumCreatorRaise;\n    // Seeder fee paid in reserve if the distribution is a success.\n    uint256 seederFee;\n    // Initial reserve value forwarded to minted redeemable tokens on success.\n    uint256 redeemInit;\n}\n\n/// Configuration specific to constructing the `Trust`.\n/// `Trust` contracts also take inner config for the pool and token.\nstruct TrustConfig {\n    // Address of the creator who will receive reserve assets on successful\n    // distribution.\n    address creator;\n    // Minimum amount to raise for the creator from the distribution period.\n    // A successful distribution raises at least this AND also the seed fee and\n    // `redeemInit`;\n    // On success the creator receives these funds.\n    // On failure the creator receives `0`.\n    uint256 minimumCreatorRaise;\n    // The `SeedERC20Factory` on the current network.\n    SeedERC20Factory seedERC20Factory;\n    // Either an EOA (externally owned address) or `address(0)`.\n    // If an EOA the seeder account must transfer seed funds to the newly\n    // constructed `Trust` before distribution can start.\n    // If `address(0)` a new `SeedERC20` contract is built in the `Trust`\n    // constructor.\n    address seeder;\n    // The reserve amount that seeders receive in addition to what they\n    // contribute IFF the raise is successful.\n    // An absolute value, so percentages etc. must be calculated off-chain and\n    // passed in to the constructor.\n    uint256 seederFee;\n    // Total seed units to be mint and sold.\n    // 100% of all seed units must be sold for seeding to complete.\n    // Recommended to keep seed units to a small value (single-triple digits).\n    // The ability for users to buy/sell or not buy/sell dust seed quantities\n    // is likely NOT desired.\n    uint16 seederUnits;\n    // Cooldown duration in blocks for seed/unseed cycles.\n    // Seeding requires locking funds for at least the cooldown period.\n    // Ideally `unseed` is never called and `seed` leaves funds in the contract\n    // until all seed tokens are sold out.\n    // A failed raise cannot make funds unrecoverable, so `unseed` does exist,\n    // but it should be called rarely.\n    uint16 seederCooldownDuration;\n    // The amount of reserve to back the redemption initially after trading\n    // finishes. Anyone can send more of the reserve to the redemption token at\n    // any time to increase redemption value. Successful the redeemInit is sent\n    // to token holders, otherwise the failed raise is refunded instead.\n    uint256 redeemInit;\n}\n\nstruct TrustRedeemableERC20Config {\n    // The `RedeemableERC20Factory` on the current network.\n    RedeemableERC20Factory redeemableERC20Factory;\n    // Name forwarded to `ERC20` constructor.\n    string name;\n    // Symbol forwarded to `ERC20` constructor.\n    string symbol;\n    // `ITier` contract to compare statuses against on transfer.\n    ITier tier;\n    // Minimum status required for transfers in `Phase.ZERO`. Can be `0`.\n    ITier.Tier minimumStatus;\n    // Number of redeemable tokens to mint.\n    uint256 totalSupply;\n}\n\nstruct TrustRedeemableERC20PoolConfig {\n    // The `RedeemableERC20PoolFactory` on the current network.\n    RedeemableERC20PoolFactory redeemableERC20PoolFactory;\n    // The reserve erc20 token.\n    // The reserve token anchors our newly minted redeemable tokens to an\n    // existant value system.\n    // The weights and balances of the reserve token and the minted token\n    // define a dynamic spot price in the AMM.\n    IERC20 reserve;\n    // Amount of reserve token to initialize the pool.\n    // The starting/final weights are calculated against this.\n    uint256 reserveInit;\n    // Initial marketcap of the token according to the balancer pool\n    // denominated in reserve token.\n    // Th spot price of the token is ( market cap / token supply ) where market\n    // cap is defined in terms of the reserve.\n    // The spot price of a balancer pool token is a function of both the\n    // amounts of each token and their weights.\n    // This bonding curve is described in the balancer whitepaper.\n    // We define a valuation of newly minted tokens in terms of the deposited\n    // reserve. The reserve weight is set to the minimum allowable value to\n    // achieve maximum capital efficiency for the fund raising.\n    uint256 initialValuation;\n    // Final valuation is treated the same as initial valuation.\n    // The final valuation will ONLY be achieved if NO TRADING OCCURS.\n    // Any trading activity that net deposits reserve funds into the pool will\n    // increase the spot price permanently.\n    uint256 finalValuation;\n    // Minimum duration IN BLOCKS of the trading on Balancer.\n    // The trading does not stop until the `anonEndDistribution` function is\n    // called.\n    uint256 minimumTradingDuration;\n}\n\n/// @title Trust\n/// @notice Coordinates the mediation and distribution of tokens\n/// between stakeholders.\n///\n/// The `Trust` contract is responsible for configuring the\n/// `RedeemableERC20` token, `RedeemableERC20Pool` Balancer wrapper\n/// and the `SeedERC20` contract.\n///\n/// Internally the `TrustFactory` calls several admin/owner only\n/// functions on its children and these may impose additional\n/// restrictions such as `Phased` limits.\n///\n/// The `Trust` builds and references `RedeemableERC20`,\n/// `RedeemableERC20Pool` and `SeedERC20` contracts internally and\n/// manages all access-control functionality.\n///\n/// The major functions of the `Trust` contract, apart from building\n/// and configuring the other contracts, is to start and end the\n/// fundraising event, and mediate the distribution of funds to the\n/// correct stakeholders:\n///\n/// - On `Trust` construction, all minted `RedeemableERC20` tokens\n///   are sent to the `RedeemableERC20Pool`\n/// - `anonStartDistribution` can be called by anyone to begin the\n///   Dutch Auction. This will revert if this is called before seeder reserve\n///   funds are available on the `Trust`.\n/// - `anonEndDistribution` can be called by anyone (only when\n///   `RedeemableERC20Pool` is in `Phase.TWO`) to end the Dutch Auction\n///   and distribute funds to the correct stakeholders, depending on\n///   whether or not the auction met the fundraising target.\n///   - On successful raise\n///     - seed funds are returned to `seeder` address along with\n///       additional `seederFee` if configured\n///     - `redeemInit` is sent to the `redeemableERC20` address, to back\n///       redemptions\n///     - the `creator` gets the remaining balance, which should\n///       equal or exceed `minimumCreatorRaise`\n///   - On failed raise\n///     - seed funds are returned to `seeder` address\n///     - the remaining balance is sent to the `redeemableERC20` address, to\n///       back redemptions\n///     - the `creator` gets nothing\n/// @dev Mediates stakeholders and creates internal Balancer pools and tokens\n/// for a distribution.\n///\n/// The goals of a distribution:\n/// - Mint and distribute a `RedeemableERC20` as fairly as possible,\n///   prioritising true fans of a creator.\n/// - Raise a minimum reserve so that a creator can deliver value to fans.\n/// - Provide a safe space through membership style filters to enhance\n///   exclusivity for fans.\n/// - Ensure that anyone who seeds the raise (not fans) by risking and\n///   providing capital is compensated.\n///\n/// Stakeholders:\n/// - Creator: Have a project of interest to their fans\n/// - Fans: Will purchase project-specific tokens to receive future rewards\n///   from the creator\n/// - Seeder(s): Provide initial reserve assets to seed a Balancer trading pool\n/// - Deployer: Configures and deploys the `Trust` contract\n///\n/// The creator is nominated to receive reserve assets on a successful\n/// distribution. The creator must complete the project and fans receive\n/// rewards. There is no on-chain mechanism to hold the creator accountable to\n/// the project completion. Requires a high degree of trust between creator and\n/// their fans.\n///\n/// Fans are willing to trust and provide funds to a creator to complete a\n/// project. Fans likely expect some kind of reward or \"perks\" from the\n/// creator, such as NFTs, exclusive events, etc.\n/// The distributed tokens are untransferable after trading ends and merely act\n/// as records for who should receive rewards.\n///\n/// Seeders add the initial reserve asset to the Balancer pool to start the\n/// automated market maker (AMM).\n/// Ideally this would not be needed at all.\n/// Future versions of `Trust` may include a bespoke distribution mechanism\n/// rather than Balancer contracts. Currently it is required by Balancer so the\n/// seeder provides some reserve and receives a fee on successful distribution.\n/// If the distribution fails the seeder is returned their initial reserve\n/// assets. The seeder is expected to promote and mentor the creator in\n/// non-financial ways.\n///\n/// The deployer has no specific priviledge or admin access once the `Trust` is\n/// deployed. They provide the configuration, including nominating\n/// creator/seeder, and pay gas but that is all.\n/// The deployer defines the conditions under which the distribution is\n/// successful. The seeder/creator could also act as the deployer.\n///\n/// Importantly the `Trust` contract is the owner/admin of the contracts it\n/// creates. The `Trust` never transfers ownership so it directly controls all\n/// internal workflows. No stakeholder, even the deployer or creator, can act\n/// as owner of the internals.\ncontract Trust is ReentrancyGuard {\n\n    using SafeMath for uint256;\n    using Math for uint256;\n\n    using SafeERC20 for IERC20;\n    using SafeERC20 for RedeemableERC20;\n\n    /// Creator from the initial config.\n    address public immutable creator;\n    /// minimum creator raise from the initial config.\n    uint256 public immutable minimumCreatorRaise;\n    /// Seeder from the initial config.\n    address public immutable seeder;\n    /// Seeder fee from the initial config.\n    uint256 public immutable seederFee;\n    /// Seeder units from the initial config.\n    uint16 public immutable seederUnits;\n    /// Seeder cooldown duration from the initial config.\n    uint16 public immutable seederCooldownDuration;\n    /// Redeem init from the initial config.\n    uint256 public immutable redeemInit;\n    /// SeedERC20Factory from the initial config.\n    SeedERC20Factory public immutable seedERC20Factory;\n    /// Balance of the reserve asset in the Balance pool at the moment\n    /// `anonEndDistribution` is called. This must be greater than or equal to\n    /// `successBalance` for the distribution to succeed.\n    /// Will be uninitialized until `anonEndDistribution` is called.\n    /// Note the finalBalance includes the dust that is permanently locked in\n    /// the Balancer pool after the distribution.\n    /// The actual distributed amount will lose roughly 10 ** -7 times this as\n    /// locked dust.\n    /// The exact dust can be retrieved by inspecting the reserve balance of\n    /// the Balancer pool after the distribution.\n    uint256 public finalBalance;\n    /// Pool reserveInit + seederFee + redeemInit + minimumCreatorRaise.\n    /// Could be calculated as a view function but that would require external\n    /// calls to the pool contract.\n    uint256 public immutable successBalance;\n\n    /// The redeemable token minted in the constructor.\n    RedeemableERC20 public immutable token;\n    /// The `RedeemableERC20Pool` pool created for trading.\n    RedeemableERC20Pool public immutable pool;\n\n    /// Sanity checks configuration.\n    /// Creates the `RedeemableERC20` contract and mints the redeemable ERC20\n    /// token.\n    /// Creates the `RedeemableERC20Pool` contract.\n    /// (optional) Creates the `SeedERC20` contract. Pass a non-zero address to\n    /// bypass this.\n    /// Adds the Balancer pool contracts to the token sender/receiver lists as\n    /// needed.\n    /// Adds the Balancer pool reserve asset as the first redeemable on the\n    /// `RedeemableERC20` contract.\n    ///\n    /// Note on slither:\n    /// Slither detects a benign reentrancy in this constructor.\n    /// However reentrancy is not possible in a contract constructor.\n    /// Further discussion with the slither team:\n    /// https://github.com/crytic/slither/issues/887\n    ///\n    /// @param config_ Config for the Trust.\n    // Slither false positive. Constructors cannot be reentrant.\n    // https://github.com/crytic/slither/issues/887\n    // slither-disable-next-line reentrancy-benign\n    constructor (\n        TrustConfig memory config_,\n        TrustRedeemableERC20Config memory trustRedeemableERC20Config_,\n        TrustRedeemableERC20PoolConfig memory trustRedeemableERC20PoolConfig_\n    ) public {\n        require(config_.creator != address(0), \"CREATOR_0\");\n        // There are additional minimum reserve init and token supply\n        // restrictions enforced by `RedeemableERC20` and\n        // `RedeemableERC20Pool`. This ensures that the weightings and\n        // valuations will be in a sensible range according to the internal\n        // assumptions made by Balancer etc.\n        require(\n            trustRedeemableERC20Config_.totalSupply\n            >= trustRedeemableERC20PoolConfig_.reserveInit,\n            \"MIN_TOKEN_SUPPLY\"\n        );\n\n        uint256 successBalance_ = trustRedeemableERC20PoolConfig_.reserveInit\n            .add(config_.seederFee)\n            .add(config_.redeemInit)\n            .add(config_.minimumCreatorRaise);\n\n        creator = config_.creator;\n        seederFee = config_.seederFee;\n        seederUnits = config_.seederUnits;\n        seederCooldownDuration = config_.seederCooldownDuration;\n        redeemInit = config_.redeemInit;\n        minimumCreatorRaise = config_.minimumCreatorRaise;\n        seedERC20Factory = config_.seedERC20Factory;\n        successBalance = successBalance_;\n\n        RedeemableERC20 redeemableERC20_ = RedeemableERC20(\n            trustRedeemableERC20Config_.redeemableERC20Factory\n                .createChild(abi.encode(\n                    RedeemableERC20Config(\n                        address(this),\n                        trustRedeemableERC20Config_.name,\n                        trustRedeemableERC20Config_.symbol,\n                        trustRedeemableERC20Config_.tier,\n                        trustRedeemableERC20Config_.minimumStatus,\n                        trustRedeemableERC20Config_.totalSupply\n        ))));\n\n        RedeemableERC20Pool redeemableERC20Pool_ = RedeemableERC20Pool(\n            trustRedeemableERC20PoolConfig_.redeemableERC20PoolFactory\n                .createChild(abi.encode(\n                    RedeemableERC20PoolFactoryRedeemableERC20PoolConfig(\n                        trustRedeemableERC20PoolConfig_.reserve,\n                        redeemableERC20_,\n                        trustRedeemableERC20PoolConfig_.reserveInit,\n                        trustRedeemableERC20PoolConfig_.initialValuation,\n                        trustRedeemableERC20PoolConfig_.finalValuation,\n                        trustRedeemableERC20PoolConfig_.minimumTradingDuration\n        ))));\n\n        token = redeemableERC20_;\n        pool = redeemableERC20Pool_;\n\n        require(\n            redeemableERC20Pool_.finalValuation() >= successBalance_,\n            \"MIN_FINAL_VALUATION\"\n        );\n\n        if (config_.seeder == address(0)) {\n            require(\n                trustRedeemableERC20PoolConfig_\n                    .reserveInit\n                    .mod(\n                        config_.seederUnits) == 0,\n                        \"SEED_PRICE_MULTIPLIER\"\n                    );\n            config_.seeder = address(config_.seedERC20Factory\n                .createChild(abi.encode(SeedERC20Config(\n                    trustRedeemableERC20PoolConfig_.reserve,\n                    address(redeemableERC20Pool_),\n                    // seed price.\n                    redeemableERC20Pool_\n                        .reserveInit()\n                        .div(config_.seederUnits),\n                    config_.seederUnits,\n                    config_.seederCooldownDuration,\n                    \"\",\n                    \"\"\n                )))\n            );\n        }\n        seeder = config_.seeder;\n\n        // Need to grant transfers for a few balancer addresses to facilitate\n        // setup and exits.\n        redeemableERC20_.grantRole(\n            redeemableERC20_.RECEIVER(),\n            redeemableERC20Pool_.crp().bFactory()\n        );\n        redeemableERC20_.grantRole(\n            redeemableERC20_.RECEIVER(),\n            address(redeemableERC20Pool_.crp())\n        );\n        redeemableERC20_.grantRole(\n            redeemableERC20_.RECEIVER(),\n            address(redeemableERC20Pool_)\n        );\n        redeemableERC20_.grantRole(\n            redeemableERC20_.SENDER(),\n            address(redeemableERC20Pool_.crp())\n        );\n\n        // Need to grant creator ability to add redeemables.\n        redeemableERC20_.grantRole(\n            redeemableERC20_.REDEEMABLE_ADDER(),\n            config_.creator\n        );\n        redeemableERC20_.grantRole(\n            redeemableERC20_.REDEEMABLE_ADDER(),\n            address(this)\n        );\n\n        // The trust needs the ability to burn the distributor.\n        redeemableERC20_.grantRole(\n            redeemableERC20_.DISTRIBUTOR_BURNER(),\n            address(this)\n        );\n\n        // The pool reserve must always be one of the redeemable assets.\n        redeemableERC20_.addRedeemable(\n            trustRedeemableERC20PoolConfig_.reserve\n        );\n\n        // There is no longer any reason for the redeemableERC20 to have an\n        // admin.\n        redeemableERC20_.renounceRole(\n            redeemableERC20_.DEFAULT_ADMIN_ROLE(),\n            address(this)\n        );\n        redeemableERC20_.renounceRole(\n            redeemableERC20_.REDEEMABLE_ADDER(),\n            address(this)\n        );\n\n        // Send all tokens to the pool immediately.\n        // When the seed funds are raised `anonStartDistribution` on the\n        // `Trust` will build a pool from these.\n        redeemableERC20_.safeTransfer(\n            address(redeemableERC20Pool_),\n            trustRedeemableERC20Config_.totalSupply\n        );\n    }\n\n    /// Accessor for the `TrustContracts` of this `Trust`.\n    function getContracts() external view returns(TrustContracts memory) {\n        return TrustContracts(\n            address(pool.reserve()),\n            address(token),\n            address(pool),\n            address(seeder),\n            address(token.tierContract()),\n            address(pool.crp()),\n            address(pool.crp().bPool())\n        );\n    }\n\n    /// Accessor for the `TrustConfig` of this `Trust`.\n    function getTrustConfig() external view returns(TrustConfig memory) {\n        return TrustConfig(\n            address(creator),\n            minimumCreatorRaise,\n            seedERC20Factory,\n            address(seeder),\n            seederFee,\n            seederUnits,\n            seederCooldownDuration,\n            redeemInit\n        );\n    }\n\n    /// Accessor for the `DistributionProgress` of this `Trust`.\n    function getDistributionProgress()\n        external\n        view\n        returns(DistributionProgress memory)\n    {\n        address balancerPool_ = address(pool.crp().bPool());\n        uint256 poolReserveBalance_;\n        uint256 poolTokenBalance_;\n        if (balancerPool_ != address(0)) {\n            poolReserveBalance_ = pool.reserve().balanceOf(balancerPool_);\n            poolTokenBalance_ = token.balanceOf(balancerPool_);\n        }\n        else {\n            poolReserveBalance_ = 0;\n            poolTokenBalance_ = 0;\n        }\n\n        return DistributionProgress(\n            getDistributionStatus(),\n            pool.phaseBlocks(0),\n            pool.phaseBlocks(1),\n            poolReserveBalance_,\n            poolTokenBalance_,\n            pool.reserveInit(),\n            minimumCreatorRaise,\n            seederFee,\n            redeemInit\n        );\n    }\n\n    /// Accessor for the `DistributionStatus` of this `Trust`.\n    function getDistributionStatus() public view returns (DistributionStatus) {\n        Phase poolPhase_ = pool.currentPhase();\n        if (poolPhase_ == Phase.ZERO) {\n            if (\n                pool.reserve().balanceOf(address(pool)) >= pool.reserveInit()\n            ) {\n                return DistributionStatus.Seeded;\n            } else {\n                return DistributionStatus.Pending;\n            }\n        }\n        else if (poolPhase_ == Phase.ONE) {\n            return DistributionStatus.Trading;\n        }\n        else if (poolPhase_ == Phase.TWO) {\n            return DistributionStatus.TradingCanEnd;\n        }\n        else if (poolPhase_ == Phase.THREE) {\n            if (finalBalance >= successBalance) {\n                return DistributionStatus.Success;\n            }\n            else {\n                return DistributionStatus.Fail;\n            }\n        }\n    }\n\n    /// Anyone can end the distribution.\n    /// The requirement is that the `minimumTradingDuration` has elapsed.\n    /// If the `successBalance` is reached then the creator receives the raise\n    /// and seeder earns a fee.\n    /// Else the initial reserve is refunded to the seeder and sale proceeds\n    /// rolled forward to token holders (not the creator).\n    function anonEndDistribution() external nonReentrant {\n        finalBalance = pool.reserve().balanceOf(address(pool.crp().bPool()));\n\n        pool.ownerEndDutchAuction();\n        // Burning the distributor moves the token to its `Phase.ONE` and\n        // unlocks redemptions.\n        // The distributor is the `bPool` itself.\n        // Requires that the `Trust` has been granted `ONLY_DISTRIBUTOR_BURNER`\n        // role on the `redeemableERC20`.\n        token.burnDistributor(\n            address(pool.crp().bPool())\n        );\n\n        // Balancer traps a tiny amount of reserve in the pool when it exits.\n        uint256 poolDust_ = pool.reserve()\n            .balanceOf(address(pool.crp().bPool()));\n        // The dust is included in the final balance for UX reasons.\n        // We don't want to fail the raise due to dust, even if technically it\n        // was a failure.\n        // To ensure a good UX for creators and token holders we subtract the\n        // dust from the seeder.\n        uint256 availableBalance_ = pool.reserve().balanceOf(address(this));\n\n        // Base payments for each fundraiser.\n        uint256 seederPay_ = pool.reserveInit().sub(poolDust_);\n        uint256 creatorPay_ = 0;\n\n        // Set aside the redemption and seed fee if we reached the minimum.\n        if (finalBalance >= successBalance) {\n            // The seeder gets an additional fee on success.\n            seederPay_ = seederPay_.add(seederFee);\n\n            // The creators get new funds raised minus redeem and seed fees.\n            // Can subtract without underflow due to the inequality check for\n            // this code block.\n            // Proof (assuming all positive integers):\n            // final balance >= success balance\n            // AND seed pay = seed init + seed fee\n            // AND success = seed init + seed fee + token pay + min raise\n            // SO success = seed pay + token pay + min raise\n            // SO success >= seed pay + token pay\n            // SO success - (seed pay + token pay) >= 0\n            // SO final balance - (seed pay + token pay) >= 0\n            //\n            // Implied is the remainder of finalBalance_ as redeemInit\n            // This will be transferred to the token holders below.\n            creatorPay_ = availableBalance_.sub(seederPay_.add(redeemInit));\n        }\n\n        if (creatorPay_ > 0) {\n            pool.reserve().safeTransfer(\n                creator,\n                creatorPay_\n            );\n        }\n\n        pool.reserve().safeTransfer(\n            seeder,\n            seederPay_\n        );\n\n        // Send everything left to the token holders.\n        // Implicitly the remainder of the finalBalance_ is:\n        // - the redeem init if successful\n        // - whatever users deposited in the AMM if unsuccessful\n        uint256 remainder_ = pool.reserve().balanceOf(address(this));\n        if (remainder_ > 0) {\n            pool.reserve().safeTransfer(\n                address(token),\n                remainder_\n            );\n        }\n    }\n}"
        },
        "./contracts/tier/ITier.sol": {
            "content": "// SPDX-License-Identifier: CAL\n\npragma solidity 0.6.12;\n\n/// @title ITier\n/// @notice `ITier` is a simple interface that contracts can\n/// implement to provide membership lists for other contracts.\n///\n/// There are many use-cases for a time-preserving,\n/// conditional membership list.\n///\n/// Some examples include:\n///\n/// - Self-serve whitelist to participate in fundraising\n/// - Lists of users who can claim airdrops and perks\n/// - Pooling resources with implied governance/reward tiers\n/// - POAP style attendance proofs allowing access to future exclusive events\n///\n/// @dev Standard interface to a tiered membership.\n///\n/// A \"membership\" can represent many things:\n/// - Exclusive access.\n/// - Participation in some event or process.\n/// - KYC completion.\n/// - Combination of sub-memberships.\n/// - Etc.\n///\n/// The high level requirements for a contract implementing `ITier`:\n/// - MUST represent held tiers with the `Tier` enum.\n/// - MUST implement `report`.\n///   - The report is a `uint256` that SHOULD represent the block each tier has\n///     been continuously held since encoded as `uint32`.\n///   - The encoded tiers start at ONE; ZERO is implied if no tier has ever\n///     been held.\n///   - `Tier.ZERO` is NOT encoded in the report, it is simply the fallback\n///     value.\n///   - If a tier is lost the block data is erased for that tier and will be\n///     set if/when the tier is regained to the new block.\n///   - If the historical block information is not available the report MAY\n///     return `0x00000000` for all held tiers.\n///   - Tiers that are lost or have never been held MUST return `0xFFFFFFFF`.\n/// - SHOULD implement `setTier`.\n///   - Contracts SHOULD revert with `SET_TIER` error if they cannot\n///     meaningfully set a tier directly.\n///     For example a contract that can only derive a membership tier by\n///     reading the state of an external contract cannot set tiers.\n///   - Contracts implementing `setTier` SHOULD error with `SET_ZERO_TIER`\n///     if `Tier.ZERO` is being set.\n/// - MUST emit `TierChange` when `setTier` successfully writes a new tier.\n///   - Contracts that cannot meaningfully set a tier are exempt.\ninterface ITier {\n    /// 9 Possible tiers.\n    /// Fits nicely as uint32 in uint256 which is helpful for internal storage\n    /// concerns.\n    /// 8 tiers can be achieved, ZERO is the tier when no tier has been\n    /// achieved.\n    enum Tier {\n        ZERO,\n        ONE,\n        TWO,\n        THREE,\n        FOUR,\n        FIVE,\n        SIX,\n        SEVEN,\n        EIGHT\n    }\n\n    /// Every time a Tier changes we log start and end Tier against the\n    /// account.\n    /// This MAY NOT be emitted if reports are being read from the state of an\n    /// external contract.\n    event TierChange(\n        address indexed account,\n        Tier indexed startTier,\n        Tier indexed endTier\n    );\n\n    /// @notice Users can set their own tier by calling `setTier`.\n    ///\n    /// The contract that implements `ITier` is responsible for checking\n    /// eligibility and/or taking actions required to set the tier.\n    ///\n    /// For example, the contract must take/refund any tokens relevant to\n    /// changing the tier.\n    ///\n    /// Obviously the user is responsible for any approvals for this action\n    /// prior to calling `setTier`.\n    ///\n    /// When the tier is changed a `TierChange` event will be emmited as:\n    /// ```\n    /// event TierChange(address account, Tier startTier, Tier endTier);\n    /// ```\n    ///\n    /// The `setTier` function includes arbitrary data as the third\n    /// parameter. This can be used to disambiguate in the case that\n    /// there may be many possible options for a user to achieve some tier.\n    ///\n    /// For example, consider the case where `Tier.THREE` can be achieved\n    /// by EITHER locking 1x rare NFT or 3x uncommon NFTs. A user with both\n    /// could use `data` to explicitly state their intent.\n    ///\n    /// NOTE however that _any_ address can call `setTier` for any other\n    /// address.\n    ///\n    /// If you implement `data` or anything that changes state then be very\n    /// careful to avoid griefing attacks.\n    ///\n    /// The `data` parameter can also be ignored by the contract implementing\n    /// `ITier`. For example, ERC20 tokens are fungible so only the balance\n    /// approved by the user is relevant to a tier change.\n    ///\n    /// The `setTier` function SHOULD prevent users from reassigning\n    /// `Tier.ZERO` to themselves.\n    ///\n    /// The `Tier.ZERO` status represents never having any status.\n    /// @dev Updates the tier of an account.\n    ///\n    /// The implementing contract is responsible for all checks and state\n    /// changes required to set the tier. For example, taking/refunding\n    /// funds/NFTs etc.\n    ///\n    /// Contracts may disallow directly setting tiers, preferring to derive\n    /// reports from other onchain data.\n    /// In this case they should `revert(\"SET_TIER\");`.\n    ///\n    /// @param account Account to change the tier for.\n    /// @param endTier Tier after the change.\n    /// @param data Arbitrary input to disambiguate ownership\n    /// (e.g. NFTs to lock).\n    function setTier(\n        address account,\n        Tier endTier,\n        bytes memory data\n    )\n        external;\n\n    /// @notice A tier report is a `uint256` that contains each of the block\n    /// numbers each tier has been held continously since as a `uint32`.\n    /// There are 9 possible tier, starting with `Tier.ZERO` for `0` offset or\n    /// \"never held any tier\" then working up through 8x 4 byte offsets to the\n    /// full 256 bits.\n    ///\n    /// Low bits = Lower tier.\n    ///\n    /// In hexadecimal every 8 characters = one tier, starting at `Tier.EIGHT`\n    /// from high bits and working down to `Tier.ONE`.\n    ///\n    /// `uint32` should be plenty for any blockchain that measures block times\n    /// in seconds, but reconsider if deploying to an environment with\n    /// significantly sub-second block times.\n    ///\n    /// ~135 years of 1 second blocks fit into `uint32`.\n    ///\n    /// `2^8 / (365 * 24 * 60 * 60)`\n    ///\n    /// When a user INCREASES their tier they keep all the block numbers they\n    /// already had, and get new block times for each increased tiers they have\n    /// earned.\n    ///\n    /// When a user DECREASES their tier they return to `0xFFFFFFFF` (never)\n    /// for every tier level they remove, but keep their block numbers for the\n    /// remaining tiers.\n    ///\n    /// GUIs are encouraged to make this dynamic very clear for users as\n    /// round-tripping to a lower status and back is a DESTRUCTIVE operation\n    /// for block times.\n    ///\n    /// The intent is that downstream code can provide additional benefits for\n    /// members who have maintained a certain tier for/since a long time.\n    /// These benefits can be provided by inspecting the report, and by\n    /// on-chain contracts directly,\n    /// rather than needing to work with snapshots etc.\n    /// @dev Returns the earliest block the account has held each tier for\n    /// continuously.\n    /// This is encoded as a uint256 with blocks represented as 8x\n    /// concatenated uint32.\n    /// I.e. Each 4 bytes of the uint256 represents a u32 tier start time.\n    /// The low bits represent low tiers and high bits the high tiers.\n    /// Implementing contracts should return 0xFFFFFFFF for lost &\n    /// never-held tiers.\n    ///\n    /// @param account Account to get the report for.\n    /// @return The report blocks encoded as a uint256.\n    function report(address account) external view returns (uint256);\n}"
        },
        "./contracts/phased/Phased.sol": {
            "content": "// SPDX-License-Identifier: CAL\npragma solidity ^0.6.12;\n\n/// Defines all possible phases.\n/// `Phased` begins in `Phase.ZERO` and moves through each phase sequentially.\nenum Phase {\n    ZERO,\n    ONE,\n    TWO,\n    THREE,\n    FOUR,\n    FIVE,\n    SIX,\n    SEVEN,\n    EIGHT\n}\n\n/// @title Phased\n/// @notice `Phased` is an abstract contract that defines up to `9` phases that\n/// an implementing contract moves through.\n///\n/// `Phase.ZERO` is always the first phase and does not, and cannot, be set\n/// expicitly. Effectively it is implied that `Phase.ZERO` has been active\n/// since block zero.\n///\n/// Each subsequent phase `Phase.ONE` through `Phase.EIGHT` must be\n/// scheduled sequentially and explicitly at a block number.\n///\n/// Only the immediate next phase can be scheduled with `scheduleNextPhase`,\n/// it is not possible to schedule multiple phases ahead.\n///\n/// Multiple phases can be scheduled in a single block if each scheduled phase\n/// is scheduled for the current block.\n///\n/// Several utility functions and modifiers are provided.\n///\n/// A single hook `_beforeScheduleNextPhase` is provided so contracts can\n/// implement additional phase shift checks.\n///\n/// One event `PhaseShiftScheduled` is emitted each time a phase shift is\n/// scheduled (not when the scheduled phase is reached).\n///\n/// @dev `Phased` contracts have a defined timeline with available\n/// functionality grouped into phases.\n/// Every `Phased` contract starts at `Phase.ZERO` and moves sequentially\n/// through phases `ONE` to `EIGHT`.\n/// Every `Phase` other than `Phase.ZERO` is optional, there is no requirement\n/// that all 9 phases are implemented.\n/// Phases can never be revisited, the inheriting contract always moves through\n/// each achieved phase linearly.\n/// This is enforced by only allowing `scheduleNextPhase` to be called once per\n/// phase.\n/// It is possible to call `scheduleNextPhase` several times in a single block\n/// but the `block.number` for each phase must be reached each time to schedule\n/// the next phase.\n/// Importantly there are events and several modifiers and checks available to\n/// ensure that functionality is limited to the current phase.\n/// The full history of each phase shift block is recorded as a fixed size\n/// array of `uint32`.\nabstract contract Phased {\n    /// Every phase block starts uninitialized.\n    /// Only uninitialized blocks can be set by the phase scheduler.\n    uint32 constant public UNINITIALIZED = uint32(-1);\n\n    /// `PhaseShiftScheduled` is emitted when the next phase is scheduled.\n    event PhaseShiftScheduled(uint32 indexed newPhaseBlock_);\n\n    /// 8 phases each as 32 bits to fit a single 32 byte word.\n    uint32[8] public phaseBlocks = [\n        UNINITIALIZED,\n        UNINITIALIZED,\n        UNINITIALIZED,\n        UNINITIALIZED,\n        UNINITIALIZED,\n        UNINITIALIZED,\n        UNINITIALIZED,\n        UNINITIALIZED\n    ];\n\n    /// Pure function to reduce an array of phase blocks and block number to a\n    /// specific `Phase`.\n    /// The phase will be the highest attained even if several phases have the\n    /// same block number.\n    /// If every phase block is after the block number then `Phase.ZERO` is\n    /// returned.\n    /// If every phase block is before the block number then `Phase.EIGHT` is\n    /// returned.\n    /// @param phaseBlocks_ Fixed array of phase blocks to compare against.\n    /// @param blockNumber_ Determine the relevant phase relative to this block\n    /// number.\n    /// @return The \"current\" phase relative to the block number and phase\n    /// blocks list.\n    function phaseAtBlockNumber(\n        uint32[8] memory phaseBlocks_,\n        uint32 blockNumber_\n    )\n        public\n        pure\n        returns(Phase)\n    {\n        for(uint i_ = 0; i_<8; i_++) {\n            if (blockNumber_ < phaseBlocks_[i_]) {\n                return Phase(i_);\n            }\n        }\n        return Phase(8);\n    }\n\n    /// Pure function to reduce an array of phase blocks and phase to a\n    /// specific block number.\n    /// `Phase.ZERO` will always return block `0`.\n    /// Every other phase will map to a block number in `phaseBlocks_`.\n    /// @param phaseBlocks_ Fixed array of phase blocks to compare against.\n    /// @param phase_ Determine the relevant block number for this phase.\n    /// @return The block number for the phase according to the phase blocks\n    ///         list, as uint32.\n    function blockNumberForPhase(uint32[8] calldata phaseBlocks_, Phase phase_)\n        external\n        pure\n        returns(uint32)\n    {\n        return phase_ > Phase.ZERO ? phaseBlocks_[uint(phase_) - 1] : 0;\n    }\n\n    /// Impure read-only function to return the \"current\" phase from internal\n    /// contract state.\n    /// Simply wraps `phaseAtBlockNumber` for current values of `phaseBlocks`\n    /// and `block.number`.\n    function currentPhase() public view returns (Phase) {\n        return phaseAtBlockNumber(phaseBlocks, uint32(block.number));\n    }\n\n    /// Modifies functions to only be callable in a specific phase.\n    /// @param phase_ Modified functions can only be called during this phase.\n    modifier onlyPhase(Phase phase_) {\n        require(currentPhase() == phase_, \"BAD_PHASE\");\n        _;\n    }\n\n    /// Modifies functions to only be callable in a specific phase OR if the\n    /// specified phase has passed.\n    /// @param phase_ Modified function only callable during or after this\n    /// phase.\n    modifier onlyAtLeastPhase(Phase phase_) {\n        require(currentPhase() >= phase_, \"MIN_PHASE\");\n        _;\n    }\n\n    /// Writes the block for the next phase.\n    /// Only uninitialized blocks can be written to.\n    /// Only the immediate next phase relative to `currentPhase` can be written\n    /// to.\n    /// Emits `PhaseShiftScheduled` with the next phase block.\n    /// @param nextPhaseBlock_ The block for the next phase.\n    function scheduleNextPhase(uint32 nextPhaseBlock_) internal {\n        require(uint32(block.number) <= nextPhaseBlock_, \"NEXT_BLOCK_PAST\");\n        require(nextPhaseBlock_ < UNINITIALIZED, \"NEXT_BLOCK_UNINITIALIZED\");\n\n        // The next index is the current phase because `Phase.ZERO` doesn't\n        // exist as an index.\n        uint nextIndex_ = uint(currentPhase());\n        require(UNINITIALIZED == phaseBlocks[nextIndex_], \"NEXT_BLOCK_SET\");\n\n        _beforeScheduleNextPhase(nextPhaseBlock_);\n        phaseBlocks[nextIndex_] = nextPhaseBlock_;\n\n        emit PhaseShiftScheduled(nextPhaseBlock_);\n    }\n\n    /// Hook called before scheduling the next phase.\n    /// Useful to apply additional constraints or state changes on a phase\n    /// change.\n    /// Note this is called when scheduling the phase change, not on the block\n    /// the phase change occurs.\n    /// This is called before the phase change so that all functionality that\n    /// is behind a phase gate is still available at the moment of applying the\n    /// hook for scheduling the next phase.\n    /// @param nextPhaseBlock_ The block for the next phase.\n    function _beforeScheduleNextPhase(uint32 nextPhaseBlock_)\n        internal\n        virtual\n    { } //solhint-disable-line no-empty-blocks\n}"
        },
        "./contracts/seed/SeedERC20.sol": {
            "content": "// SPDX-License-Identifier: CAL\npragma solidity ^0.6.12;\n\npragma experimental ABIEncoderV2;\n\nimport { ERC20 } from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport { SafeERC20 } from \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport { SafeMath } from \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport { Math } from \"@openzeppelin/contracts/math/Math.sol\";\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport { Phase, Phased } from \"../phased/Phased.sol\";\nimport { Cooldown } from \"../cooldown/Cooldown.sol\";\n\n/// Everything required to construct a `SeedERC20` contract.\nstruct SeedERC20Config {\n    // Reserve erc20 token contract used to purchase seed tokens.\n    IERC20 reserve;\n    // Recipient address for all reserve funds raised when seeding is complete.\n    address recipient;\n    // Price per seed unit denominated in reserve token.\n    uint256 seedPrice;\n    // Total seed units to be mint and sold.\n    // 100% of all seed units must be sold for seeding to complete.\n    // Recommended to keep seed units to a small value (single-triple digits).\n    // The ability for users to buy/sell or not buy/sell dust seed quantities\n    // is likely NOT desired.\n    uint16 seedUnits;\n    // Cooldown duration in blocks for seed/unseed cycles.\n    // Seeding requires locking funds for at least the cooldown period.\n    // Ideally `unseed` is never called and `seed` leaves funds in the contract\n    // until all seed tokens are sold out.\n    // A failed raise cannot make funds unrecoverable, so `unseed` does exist,\n    // but it should be called rarely.\n    uint16 cooldownDuration;\n    // ERC20 name.\n    string name;\n    // ERC20 symbol.\n    string symbol;\n}\n\n/// @title SeedERC20\n/// @notice Facilitates raising seed reserve from an open set of seeders.\n///\n/// When a single seeder address cannot be specified at the time the\n/// `Trust` is constructed a `SeedERC20` will be deployed.\n///\n/// The `SeedERC20` has two phases:\n///\n/// - `Phase.ZERO`: Can swap seed tokens for reserve assets with\n/// `seed` and `unseed`\n/// - `Phase.ONE`: Can redeem seed tokens pro-rata for reserve assets\n///\n/// When the last seed token is distributed the `SeedERC20`\n/// immediately moves to `Phase.ONE` atomically within that\n/// transaction and forwards all reserve to the configured recipient.\n///\n/// For our use-case the recipient is a `Trust` contract but `SeedERC20`\n/// could be used as a mini-fundraise contract for many purposes. In the case\n/// that a recipient is not a `Trust` the recipient will need to be careful not\n/// to fall afoul of KYC and securities law.\n///\n/// @dev Facilitates a pool of reserve funds to forward to a named recipient\n/// contract.\n/// The funds to raise and the recipient is fixed at construction.\n/// The total is calculated as `( seedPrice * seedUnits )` and so is a fixed\n/// amount. It is recommended to keep seedUnits relatively small so that each\n/// unit represents a meaningful contribution to keep dust out of the system.\n///\n/// The contract lifecycle is split into two phases:\n///\n/// - `Phase.ZERO`: the `seed` and `unseed` functions are callable by anyone.\n/// - `Phase.ONE`: holders of the seed erc20 token can redeem any reserve funds\n///   in the contract pro-rata.\n///\n/// When `seed` is called the `SeedERC20` contract takes ownership of reserve\n/// funds in exchange for seed tokens.\n/// When `unseed` is called the `SeedERC20` contract takes ownership of seed\n/// tokens in exchange for reserve funds.\n///\n/// When the last `seed` token is transferred to an external address the\n/// `SeedERC20` contract immediately:\n///\n/// - Moves to `Phase.ONE`, disabling both `seed` and `unseed`\n/// - Transfers the full balance of reserve from itself to the recipient\n///   address.\n///\n/// Seed tokens are standard ERC20 so can be freely transferred etc.\n///\n/// The recipient (or anyone else) MAY transfer reserve back to the `SeedERC20`\n/// at a later date.\n/// Seed token holders can call `redeem` in `Phase.ONE` to burn their tokens in\n/// exchange for pro-rata reserve assets.\ncontract SeedERC20 is Ownable, ERC20, Phased, Cooldown {\n\n    using SafeMath for uint256;\n    using Math for uint256;\n    using SafeERC20 for IERC20;\n\n    // Seed token burn for reserve.\n    event Redeem(\n        // Account burning and receiving.\n        address indexed redeemer,\n        // Number of seed tokens burned.\n        // Number of reserve redeemed for burned seed tokens.\n        // `[seedAmount, reserveAmount]`\n        uint256[2] redeemAmounts\n    );\n\n    /// Reserve erc20 token contract used to purchase seed tokens.\n    IERC20 public immutable reserve;\n    /// Recipient address for all reserve funds raised when seeding is\n    /// complete.\n    address public immutable recipient;\n    /// Price in reserve for a unit of seed token.\n    uint256 public immutable seedPrice;\n\n    /// Sanity checks on configuration.\n    /// Store relevant config as contract state.\n    /// Mint all seed tokens.\n    /// @param config_ All config required to construct the contract.\n    constructor (SeedERC20Config memory config_)\n    public\n    ERC20(config_.name, config_.symbol)\n    Cooldown(config_.cooldownDuration) {\n        require(config_.seedPrice > 0, \"PRICE_0\");\n        require(config_.seedUnits > 0, \"UNITS_0\");\n        require(config_.recipient != address(0), \"RECIPIENT_0\");\n        seedPrice = config_.seedPrice;\n        reserve = config_.reserve;\n        recipient = config_.recipient;\n        _setupDecimals(0);\n        _mint(address(this), config_.seedUnits);\n    }\n\n    /// Take reserve from seeder as `units * seedPrice`.\n    ///\n    /// When the final unit is sold the contract immediately:\n    ///\n    /// - enters `Phase.ONE`\n    /// - transfers its entire reserve balance to the recipient\n    ///\n    /// The desired units may not be available by the time this transaction\n    /// executes. This could be due to high demand, griefing and/or\n    /// front-running on the contract.\n    /// The caller can set a range between `minimumUnits_` and `desiredUnits_`\n    /// to mitigate errors due to the contract running out of stock.\n    /// The maximum available units up to `desiredUnits_` will always be\n    /// processed by the contract. Only the stock of this contract is checked\n    /// against the seed unit range, the caller is responsible for ensuring\n    /// their reserve balance.\n    /// Seeding enforces the cooldown configured in the constructor.\n    /// @param minimumUnits_ The minimum units the caller will accept for a\n    /// successful `seed` call.\n    /// @param desiredUnits_ The maximum units the caller is willing to fund.\n    function seed(uint256 minimumUnits_, uint256 desiredUnits_)\n        external\n        onlyPhase(Phase.ZERO)\n        onlyAfterCooldown\n    {\n        require(desiredUnits_ > 0, \"DESIRED_0\");\n        require(minimumUnits_ <= desiredUnits_, \"MINIMUM_OVER_DESIRED\");\n        uint256 remainingStock_ = balanceOf(address(this));\n        require(minimumUnits_ <= remainingStock_, \"INSUFFICIENT_STOCK\");\n\n        uint256 units_ = desiredUnits_.min(remainingStock_);\n\n        // If `remainingStock_` is less than units then the transfer below will\n        // fail and rollback.\n        if (remainingStock_ == units_) {\n            scheduleNextPhase(uint32(block.number));\n        }\n        _transfer(address(this), msg.sender, units_);\n\n        reserve.safeTransferFrom(\n            msg.sender,\n            address(this),\n            seedPrice.mul(units_)\n        );\n        // Immediately transfer to the recipient.\n        // The transfer is immediate rather than only approving for the\n        // recipient.\n        // This avoids the situation where a seeder immediately redeems their\n        // units before the recipient can withdraw.\n        // It also introduces a failure case where the reserve errors on\n        // transfer. If this fails then everyone can call `unseed` after their\n        // individual cooldowns to exit.\n        if (currentPhase() == Phase.ONE) {\n            reserve.safeTransfer(recipient, reserve.balanceOf(address(this)));\n        }\n    }\n\n    /// Send reserve back to seeder as `( units * seedPrice )`.\n    ///\n    /// Allows addresses to back out until `Phase.ONE`.\n    /// Unlike `redeem` the seed tokens are NOT burned so become newly\n    /// available for another account to `seed`.\n    ///\n    /// In `Phase.ONE` the only way to recover reserve assets is:\n    /// - Wait for the recipient or someone else to deposit reserve assets into\n    ///   this contract.\n    /// - Call redeem and burn the seed tokens\n    ///\n    /// @param units_ Units to unseed.\n    function unseed(uint256 units_)\n        external\n        onlyPhase(Phase.ZERO)\n        onlyAfterCooldown\n    {\n        _transfer(msg.sender, address(this), units_);\n\n        // Reentrant reserve transfer.\n        reserve.safeTransfer(msg.sender, seedPrice.mul(units_));\n    }\n\n    /// Burn seed tokens for pro-rata reserve assets.\n    ///\n    /// ```\n    /// (units * reserve held by seed contract) / total seed token supply\n    /// = reserve transfer to `msg.sender`\n    /// ```\n    ///\n    /// The recipient or someone else must first transfer reserve assets to the\n    /// `SeedERC20` contract.\n    /// The recipient MUST be a TRUSTED contract or third party.\n    /// This contract has no control over the reserve assets once they are\n    /// transferred away at the start of `Phase.ONE`.\n    /// It is the caller's responsibility to monitor the reserve balance of the\n    /// `SeedERC20` contract.\n    ///\n    /// For example, if `SeedERC20` is used as a seeder for a `Trust` contract\n    /// (in this repo) it will receive a refund or refund + fee.\n    /// @param units_ Amount of seed units to burn and redeem for reserve\n    /// assets.\n    function redeem(uint256 units_) external onlyPhase(Phase.ONE) {\n        uint256 _supplyBeforeBurn = totalSupply();\n        _burn(msg.sender, units_);\n\n        uint256 _currentReserveBalance = reserve.balanceOf(address(this));\n        // Guard against someone accidentally calling redeem before any reserve\n        // has been returned.\n        require(_currentReserveBalance > 0, \"RESERVE_BALANCE\");\n        uint256 reserveAmount_ = units_\n            .mul(_currentReserveBalance)\n            .div(_supplyBeforeBurn);\n        emit Redeem(\n            msg.sender,\n            [units_, reserveAmount_]\n        );\n        reserve.safeTransfer(\n            msg.sender,\n            reserveAmount_\n        );\n    }\n\n    /// Sanity check the last phase is `Phase.ONE`.\n    /// @inheritdoc Phased\n    function _beforeScheduleNextPhase(uint32 nextPhaseBlock_)\n        internal\n        override\n        virtual\n    {\n        super._beforeScheduleNextPhase(nextPhaseBlock_);\n        // Phase.ONE is the last phase.\n        assert(currentPhase() < Phase.ONE);\n    }\n}"
        },
        "./contracts/cooldown/Cooldown.sol": {
            "content": "// SPDX-License-Identifier: CAL\npragma solidity ^0.6.12;\n\n/// @title Cooldown\n/// @notice `Cooldown` is an abstract contract that rate limits functions on\n/// the contract per `msg.sender`.\n///\n/// Each time a function with the `onlyAfterCooldown` modifier is called the\n/// `msg.sender` must wait N blocks before calling any modified function.\n///\n/// This does nothing to prevent sybils who can generate an arbitrary number of\n/// `msg.sender` values in parallel to spam a contract.\n///\n/// `Cooldown` is intended to prevent rapid state cycling to grief a contract,\n/// such as rapidly locking and unlocking a large amount of capital in the\n/// `SeedERC20` contract.\n///\n/// Requiring a lock/deposit of significant economic stake that sybils will not\n/// have access to AND applying a cooldown IS a sybil mitigation. The economic\n/// stake alone is NOT sufficient if gas is cheap as sybils can cycle the same\n/// stake between each other. The cooldown alone is NOT sufficient as many\n/// sybils can be created, each as a new `msg.sender`.\n///\n/// @dev Base for anything that enforces a cooldown delay on functions.\n/// Cooldown requires a minimum time in blocks to elapse between actions that\n/// cooldown. The modifier `onlyAfterCooldown` both enforces and triggers the\n/// cooldown. There is a single cooldown across all functions per-contract\n/// so any function call that requires a cooldown will also trigger it for\n/// all other functions.\n///\n/// Cooldown is NOT an effective sybil resistance alone, as the cooldown is\n/// per-address only. It is always possible for many accounts to be created\n/// to spam a contract with dust in parallel.\n/// Cooldown is useful to stop a single account rapidly cycling contract\n/// state in a way that can be disruptive to peers. Cooldown works best when\n/// coupled with economic stake associated with each state change so that\n/// peers must lock capital during the cooldown. Cooldown tracks the first\n/// `msg.sender` it sees for a call stack so cooldowns are enforced across\n/// reentrant code.\nabstract contract Cooldown {\n    /// Time in blocks to restrict access to modified functions.\n    uint16 public immutable cooldownDuration;\n\n    /// Every address has its own cooldown state.\n    mapping (address => uint256) public cooldowns;\n    address private caller;\n\n    /// The cooldown duration is global to the contract.\n    /// Cooldown duration must be greater than 0.\n    /// @param cooldownDuration_ The global cooldown duration.\n    constructor(uint16 cooldownDuration_) public {\n        require(cooldownDuration_ > 0, \"COOLDOWN_0\");\n        cooldownDuration = cooldownDuration_;\n    }\n\n    /// Modifies a function to enforce the cooldown for `msg.sender`.\n    /// Saves the original caller so that cooldowns are enforced across\n    /// reentrant code.\n    modifier onlyAfterCooldown() {\n        address caller_ = caller == address(0) ? caller = msg.sender : caller;\n        require(cooldowns[caller_] <= block.number, \"COOLDOWN\");\n        // Every action that requires a cooldown also triggers a cooldown.\n        cooldowns[caller_] = block.number + cooldownDuration;\n        _;\n        delete caller;\n    }\n}"
        },
        "@openzeppelin/contracts/math/SafeMath.sol": {
            "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n"
        },
        "@openzeppelin/contracts/math/Math.sol": {
            "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow, so we distribute\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n    }\n}\n"
        },
        "@openzeppelin/contracts/access/Ownable.sol": {
            "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../GSN/Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"
        },
        "@openzeppelin/contracts/GSN/Context.sol": {
            "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
        },
        "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
            "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
        },
        "@openzeppelin/contracts/token/ERC20/SafeERC20.sol": {
            "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\nimport \"../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
        },
        "@openzeppelin/contracts/utils/Address.sol": {
            "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
        },
        "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
            "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../../GSN/Context.sol\";\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n     * a default value of 18.\n     *\n     * To select a different value for {decimals}, use {_setupDecimals}.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory name_, string memory symbol_) public {\n        _name = name_;\n        _symbol = symbol_;\n        _decimals = 18;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Sets {decimals} to a value other than the default one of 18.\n     *\n     * WARNING: This function should only be called from the constructor. Most\n     * applications that interact with token contracts will not expect\n     * {decimals} to ever change, and may work incorrectly if it does.\n     */\n    function _setupDecimals(uint8 decimals_) internal {\n        _decimals = decimals_;\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n}\n"
        }
    },
    "settings": {
        "metadata": {
            "useLiteralContent": true
        },
        "optimizer": {
            "enabled": true,
            "runs": 100000
        },
        "outputSelection": {
            "*": {
                "*": [
                    "abi",
                    "evm.bytecode",
                    "evm.deployedBytecode",
                    "evm.methodIdentifiers"
                ],
                "": [
                    "id",
                    "ast"
                ]
            }
        }
    }
}