/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IConfigurableRightsPoolInterface extends ethers.utils.Interface {
  functions: {
    "bFactory()": FunctionFragment;
    "bPool()": FunctionFragment;
    "createPool(uint256,uint256,uint256)": FunctionFragment;
    "exitPool(uint256,uint256[])": FunctionFragment;
    "updateWeightsGradually(uint256[],uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "bFactory", values?: undefined): string;
  encodeFunctionData(functionFragment: "bPool", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "createPool",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "exitPool",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "updateWeightsGradually",
    values: [BigNumberish[], BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "bFactory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "exitPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateWeightsGradually",
    data: BytesLike
  ): Result;

  events: {};
}

export class IConfigurableRightsPool extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IConfigurableRightsPoolInterface;

  functions: {
    bFactory(overrides?: CallOverrides): Promise<[string]>;

    "bFactory()"(overrides?: CallOverrides): Promise<[string]>;

    bPool(overrides?: CallOverrides): Promise<[string]>;

    "bPool()"(overrides?: CallOverrides): Promise<[string]>;

    createPool(
      initialSupply: BigNumberish,
      minimumWeightChangeBlockPeriodParam: BigNumberish,
      addTokenTimeLockInBlocksParam: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "createPool(uint256,uint256,uint256)"(
      initialSupply: BigNumberish,
      minimumWeightChangeBlockPeriodParam: BigNumberish,
      addTokenTimeLockInBlocksParam: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    exitPool(
      poolAmountIn: BigNumberish,
      minAmountsOut: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "exitPool(uint256,uint256[])"(
      poolAmountIn: BigNumberish,
      minAmountsOut: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateWeightsGradually(
      newWeights: BigNumberish[],
      startBlock: BigNumberish,
      endBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateWeightsGradually(uint256[],uint256,uint256)"(
      newWeights: BigNumberish[],
      startBlock: BigNumberish,
      endBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  bFactory(overrides?: CallOverrides): Promise<string>;

  "bFactory()"(overrides?: CallOverrides): Promise<string>;

  bPool(overrides?: CallOverrides): Promise<string>;

  "bPool()"(overrides?: CallOverrides): Promise<string>;

  createPool(
    initialSupply: BigNumberish,
    minimumWeightChangeBlockPeriodParam: BigNumberish,
    addTokenTimeLockInBlocksParam: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "createPool(uint256,uint256,uint256)"(
    initialSupply: BigNumberish,
    minimumWeightChangeBlockPeriodParam: BigNumberish,
    addTokenTimeLockInBlocksParam: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  exitPool(
    poolAmountIn: BigNumberish,
    minAmountsOut: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "exitPool(uint256,uint256[])"(
    poolAmountIn: BigNumberish,
    minAmountsOut: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateWeightsGradually(
    newWeights: BigNumberish[],
    startBlock: BigNumberish,
    endBlock: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateWeightsGradually(uint256[],uint256,uint256)"(
    newWeights: BigNumberish[],
    startBlock: BigNumberish,
    endBlock: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    bFactory(overrides?: CallOverrides): Promise<string>;

    "bFactory()"(overrides?: CallOverrides): Promise<string>;

    bPool(overrides?: CallOverrides): Promise<string>;

    "bPool()"(overrides?: CallOverrides): Promise<string>;

    createPool(
      initialSupply: BigNumberish,
      minimumWeightChangeBlockPeriodParam: BigNumberish,
      addTokenTimeLockInBlocksParam: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "createPool(uint256,uint256,uint256)"(
      initialSupply: BigNumberish,
      minimumWeightChangeBlockPeriodParam: BigNumberish,
      addTokenTimeLockInBlocksParam: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    exitPool(
      poolAmountIn: BigNumberish,
      minAmountsOut: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "exitPool(uint256,uint256[])"(
      poolAmountIn: BigNumberish,
      minAmountsOut: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    updateWeightsGradually(
      newWeights: BigNumberish[],
      startBlock: BigNumberish,
      endBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateWeightsGradually(uint256[],uint256,uint256)"(
      newWeights: BigNumberish[],
      startBlock: BigNumberish,
      endBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    bFactory(overrides?: CallOverrides): Promise<BigNumber>;

    "bFactory()"(overrides?: CallOverrides): Promise<BigNumber>;

    bPool(overrides?: CallOverrides): Promise<BigNumber>;

    "bPool()"(overrides?: CallOverrides): Promise<BigNumber>;

    createPool(
      initialSupply: BigNumberish,
      minimumWeightChangeBlockPeriodParam: BigNumberish,
      addTokenTimeLockInBlocksParam: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "createPool(uint256,uint256,uint256)"(
      initialSupply: BigNumberish,
      minimumWeightChangeBlockPeriodParam: BigNumberish,
      addTokenTimeLockInBlocksParam: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    exitPool(
      poolAmountIn: BigNumberish,
      minAmountsOut: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "exitPool(uint256,uint256[])"(
      poolAmountIn: BigNumberish,
      minAmountsOut: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateWeightsGradually(
      newWeights: BigNumberish[],
      startBlock: BigNumberish,
      endBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateWeightsGradually(uint256[],uint256,uint256)"(
      newWeights: BigNumberish[],
      startBlock: BigNumberish,
      endBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    bFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "bFactory()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "bPool()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createPool(
      initialSupply: BigNumberish,
      minimumWeightChangeBlockPeriodParam: BigNumberish,
      addTokenTimeLockInBlocksParam: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "createPool(uint256,uint256,uint256)"(
      initialSupply: BigNumberish,
      minimumWeightChangeBlockPeriodParam: BigNumberish,
      addTokenTimeLockInBlocksParam: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    exitPool(
      poolAmountIn: BigNumberish,
      minAmountsOut: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "exitPool(uint256,uint256[])"(
      poolAmountIn: BigNumberish,
      minAmountsOut: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateWeightsGradually(
      newWeights: BigNumberish[],
      startBlock: BigNumberish,
      endBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateWeightsGradually(uint256[],uint256,uint256)"(
      newWeights: BigNumberish[],
      startBlock: BigNumberish,
      endBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
