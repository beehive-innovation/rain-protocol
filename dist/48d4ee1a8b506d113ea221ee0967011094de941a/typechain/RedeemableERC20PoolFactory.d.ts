/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface RedeemableERC20PoolFactoryInterface extends ethers.utils.Interface {
  functions: {
    "balancerFactory()": FunctionFragment;
    "createChild(bytes)": FunctionFragment;
    "crpFactory()": FunctionFragment;
    "isChild(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "balancerFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createChild",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "crpFactory",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isChild", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "balancerFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createChild",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "crpFactory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isChild", data: BytesLike): Result;

  events: {
    "NewContract(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewContract"): EventFragment;
}

export class RedeemableERC20PoolFactory extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: RedeemableERC20PoolFactoryInterface;

  functions: {
    balancerFactory(overrides?: CallOverrides): Promise<[string]>;

    "balancerFactory()"(overrides?: CallOverrides): Promise<[string]>;

    "createChild(bytes)"(
      data_: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "createChild(tuple)"(
      config_: {
        reserve: string;
        token: string;
        reserveInit: BigNumberish;
        initialValuation: BigNumberish;
        finalValuation: BigNumberish;
        minimumTradingDuration: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    crpFactory(overrides?: CallOverrides): Promise<[string]>;

    "crpFactory()"(overrides?: CallOverrides): Promise<[string]>;

    isChild(
      maybeChild_: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "isChild(address)"(
      maybeChild_: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  balancerFactory(overrides?: CallOverrides): Promise<string>;

  "balancerFactory()"(overrides?: CallOverrides): Promise<string>;

  "createChild(bytes)"(
    data_: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "createChild(tuple)"(
    config_: {
      reserve: string;
      token: string;
      reserveInit: BigNumberish;
      initialValuation: BigNumberish;
      finalValuation: BigNumberish;
      minimumTradingDuration: BigNumberish;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  crpFactory(overrides?: CallOverrides): Promise<string>;

  "crpFactory()"(overrides?: CallOverrides): Promise<string>;

  isChild(
    maybeChild_: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "isChild(address)"(
    maybeChild_: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    balancerFactory(overrides?: CallOverrides): Promise<string>;

    "balancerFactory()"(overrides?: CallOverrides): Promise<string>;

    "createChild(bytes)"(
      data_: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "createChild(tuple)"(
      config_: {
        reserve: string;
        token: string;
        reserveInit: BigNumberish;
        initialValuation: BigNumberish;
        finalValuation: BigNumberish;
        minimumTradingDuration: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<string>;

    crpFactory(overrides?: CallOverrides): Promise<string>;

    "crpFactory()"(overrides?: CallOverrides): Promise<string>;

    isChild(maybeChild_: string, overrides?: CallOverrides): Promise<boolean>;

    "isChild(address)"(
      maybeChild_: string,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    NewContract(_contract: string | null): EventFilter;
  };

  estimateGas: {
    balancerFactory(overrides?: CallOverrides): Promise<BigNumber>;

    "balancerFactory()"(overrides?: CallOverrides): Promise<BigNumber>;

    "createChild(bytes)"(
      data_: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "createChild(tuple)"(
      config_: {
        reserve: string;
        token: string;
        reserveInit: BigNumberish;
        initialValuation: BigNumberish;
        finalValuation: BigNumberish;
        minimumTradingDuration: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    crpFactory(overrides?: CallOverrides): Promise<BigNumber>;

    "crpFactory()"(overrides?: CallOverrides): Promise<BigNumber>;

    isChild(maybeChild_: string, overrides?: Overrides): Promise<BigNumber>;

    "isChild(address)"(
      maybeChild_: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    balancerFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "balancerFactory()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "createChild(bytes)"(
      data_: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "createChild(tuple)"(
      config_: {
        reserve: string;
        token: string;
        reserveInit: BigNumberish;
        initialValuation: BigNumberish;
        finalValuation: BigNumberish;
        minimumTradingDuration: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    crpFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "crpFactory()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isChild(
      maybeChild_: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "isChild(address)"(
      maybeChild_: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
