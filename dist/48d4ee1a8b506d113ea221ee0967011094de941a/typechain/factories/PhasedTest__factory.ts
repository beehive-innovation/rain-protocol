/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { PhasedTest } from "../PhasedTest";

export class PhasedTest__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(overrides?: Overrides): Promise<PhasedTest> {
    return super.deploy(overrides || {}) as Promise<PhasedTest>;
  }
  getDeployTransaction(overrides?: Overrides): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): PhasedTest {
    return super.attach(address) as PhasedTest;
  }
  connect(signer: Signer): PhasedTest__factory {
    return super.connect(signer) as PhasedTest__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): PhasedTest {
    return new Contract(address, _abi, signerOrProvider) as PhasedTest;
  }
}

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint32",
        name: "newPhaseBlock_",
        type: "uint32",
      },
    ],
    name: "PhaseShiftScheduled",
    type: "event",
  },
  {
    inputs: [],
    name: "UNINITIALIZED",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32[8]",
        name: "phaseBlocks_",
        type: "uint32[8]",
      },
      {
        internalType: "enum Phase",
        name: "phase_",
        type: "uint8",
      },
    ],
    name: "blockNumberForPhase",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "currentPhase",
    outputs: [
      {
        internalType: "enum Phase",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "hookCondition",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32[8]",
        name: "phaseBlocks_",
        type: "uint32[8]",
      },
      {
        internalType: "uint32",
        name: "blockNumber_",
        type: "uint32",
      },
    ],
    name: "phaseAtBlockNumber",
    outputs: [
      {
        internalType: "enum Phase",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "phaseBlocks",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "enum Phase",
        name: "phase_",
        type: "uint8",
      },
    ],
    name: "runsOnlyAtLeastPhase",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "enum Phase",
        name: "phase_",
        type: "uint8",
      },
    ],
    name: "runsOnlyPhase",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "nextPhaseBlock_",
        type: "uint32",
      },
    ],
    name: "testScheduleNextPhase",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "toggleHookCondition",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x61018060405263ffffffff608081815260a082905260c082905260e082905261010082905261012082905261014082905261016091909152610045906000906008610064565b506001805460ff19168117905534801561005e57600080fd5b5061011c565b6001830191839082156100f05791602002820160005b838211156100be57835183826101000a81548163ffffffff021916908363ffffffff160217905550926020019260040160208160030104928301926001030261007a565b80156100ee5782816101000a81549063ffffffff02191690556004016020816003010492830192600103026100be565b505b506100fc929150610100565b5090565b5b808211156100fc57805463ffffffff19168155600101610101565b6107c28061012b6000396000f3fe608060405234801561001057600080fd5b50600436106100be5760003560e01c80636932f6b71161007657806381e45d9a1161005b57806381e45d9a146102065780639923c94b1461020e578063abec2f811461022b576100be565b80636932f6b7146101de578063791f211f146101fe576100be565b80633bd126dc116100a75780633bd126dc1461014657806345bdfa8a1461016b57806348a8b7df146101aa576100be565b8063055ad42e146100c357806334c1df75146100ec575b600080fd5b6100cb610233565b604051808260088111156100db57fe5b815260200191505060405180910390f35b6100cb600480360361012081101561010357600080fd5b81019080806101000190600880602002604051908101604052809291908260086020028082843760009201919091525091945050503563ffffffff16905061029d565b6101696004803603602081101561015c57600080fd5b503563ffffffff166102f7565b005b610191600480360361012081101561018257600080fd5b5060ff61010082013516610303565b6040805163ffffffff9092168252519081900360200190f35b6101ca600480360360208110156101c057600080fd5b503560ff1661034b565b604080519115158252519081900360200190f35b6101ca600480360360208110156101f457600080fd5b503560ff166103e2565b610169610471565b6101916104a3565b6101916004803603602081101561022457600080fd5b50356104c7565b6101ca6104f4565b60408051610100810191829052600091610298919083906008908280855b82829054906101000a900463ffffffff1663ffffffff168152602001906004019060208260030104928301926001038202915080841161025157905050505050504361029d565b905090565b6000805b60088110156102ea578381600881106102b657fe5b602002015163ffffffff168363ffffffff1610156102e2578060088111156102da57fe5b9150506102f1565b6001016102a1565b5060085b90505b92915050565b610300816104fd565b50565b60008082600881111561031257fe5b1161031e5760006102ee565b82600183600881111561032d57fe5b036008811061033857fe5b602002013563ffffffff16905092915050565b60008180600881111561035a57fe5b610362610233565b600881111561036d57fe5b146103d957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f4241445f50484153450000000000000000000000000000000000000000000000604482015290519081900360640190fd5b50600192915050565b6000818060088111156103f157fe5b6103f9610233565b600881111561040457fe5b10156103d957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f4d494e5f50484153450000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00811660ff90911615179055565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81565b600081600881106104d457fe5b60089182820401919006600402915054906101000a900463ffffffff1681565b60015460ff1681565b8063ffffffff164363ffffffff16111561057857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4e4558545f424c4f434b5f504153540000000000000000000000000000000000604482015290519081900360640190fd5b63ffffffff818116106105ec57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4e4558545f424c4f434b5f554e494e495449414c495a45440000000000000000604482015290519081900360640190fd5b60006105f6610233565b600881111561060157fe5b90506000816008811061061057fe5b60088104919091015460079091166004026101000a900463ffffffff9081161461069b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4e4558545f424c4f434b5f534554000000000000000000000000000000000000604482015290519081900360640190fd5b6106a482610712565b81600082600881106106b257fe5b600891828204019190066004026101000a81548163ffffffff021916908363ffffffff1602179055508163ffffffff167f260aac5b840edc27b89fdf50e91311a413363a400959466e1049e6d071b8cee260405160405180910390a25050565b60015460ff1661078357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f484f4f4b5f434f4e444954494f4e000000000000000000000000000000000000604482015290519081900360640190fd5b6103008161030056fea26469706673582212201d002d7ef9321768e35e172d77c8a13294c0d7a105472e8bf9c0b60aa3afa60364736f6c634300060c0033";
