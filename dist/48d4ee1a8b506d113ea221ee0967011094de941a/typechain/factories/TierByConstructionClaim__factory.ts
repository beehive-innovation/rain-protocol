/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, BigNumberish } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { TierByConstructionClaim } from "../TierByConstructionClaim";

export class TierByConstructionClaim__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    tierContract_: string,
    minimumTier_: BigNumberish,
    overrides?: Overrides
  ): Promise<TierByConstructionClaim> {
    return super.deploy(
      tierContract_,
      minimumTier_,
      overrides || {}
    ) as Promise<TierByConstructionClaim>;
  }
  getDeployTransaction(
    tierContract_: string,
    minimumTier_: BigNumberish,
    overrides?: Overrides
  ): TransactionRequest {
    return super.getDeployTransaction(
      tierContract_,
      minimumTier_,
      overrides || {}
    );
  }
  attach(address: string): TierByConstructionClaim {
    return super.attach(address) as TierByConstructionClaim;
  }
  connect(signer: Signer): TierByConstructionClaim__factory {
    return super.connect(signer) as TierByConstructionClaim__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TierByConstructionClaim {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as TierByConstructionClaim;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "contract ITier",
        name: "tierContract_",
        type: "address",
      },
      {
        internalType: "enum ITier.Tier",
        name: "minimumTier_",
        type: "uint8",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "Claim",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account_",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "data_",
        type: "bytes",
      },
    ],
    name: "claim",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "claims",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "constructionBlock",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account_",
        type: "address",
      },
      {
        internalType: "enum ITier.Tier",
        name: "minimumTier_",
        type: "uint8",
      },
    ],
    name: "isTier",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "minimumTier",
    outputs: [
      {
        internalType: "enum ITier.Tier",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "tierContract",
    outputs: [
      {
        internalType: "contract ITier",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60a060405234801561001057600080fd5b5060405161072a38038061072a8339818101604052604081101561003357600080fd5b508051602090910151600080546001600160a01b0319166001600160a01b0384161790554360015580600881111561006757fe5b608081600881111561007557fe5b60f81b905250505060805160f81c61068b61009f6000398061033852806105e8525061068b6000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c8063bb1757cf11610050578063bb1757cf14610112578063c6788bdd146101d7578063f1ebd5dd1461020a57610072565b80630f0af57f1461007757806377544f3314610091578063a30872db146100e1575b600080fd5b61007f610233565b60408051918252519081900360200190f35b6100cd600480360360408110156100a757600080fd5b50803573ffffffffffffffffffffffffffffffffffffffff16906020013560ff16610239565b604080519115158252519081900360200190f35b6100e96102f2565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b6101d56004803603604081101561012857600080fd5b73ffffffffffffffffffffffffffffffffffffffff823516919081019060408101602082013564010000000081111561016057600080fd5b82018360208201111561017257600080fd5b8035906020019184600183028401116401000000008311171561019457600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955061030e945050505050565b005b6100cd600480360360208110156101ed57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166105d1565b6102126105e6565b6040518082600881111561022257fe5b815260200191505060405180910390f35b60015481565b60008054604080517fe053ea3100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff868116600483015291516102e493929092169163e053ea3191602480820192602092909190829003018186803b1580156102b257600080fd5b505afa1580156102c6573d6000803e3d6000fd5b505050506040513d60208110156102dc57600080fd5b50518361060a565b600154101590505b92915050565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b73ffffffffffffffffffffffffffffffffffffffff821660009081526002602052604090205482907f00000000000000000000000000000000000000000000000000000000000000009060ff16156103c757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4455504c49434154455f434c41494d0000000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff8416600081815260026020908152604080832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055805182815287518184015287517fa16751aa65ef03fb7261c0a125a84854295c191657bda7151d4396246b1bbeb49489949293849390840192908601918190849084905b8381101561047457818101518382015260200161045c565b50505050905090810190601f1680156104a15780820380516001836020036101000a031916815260200191505b509250505060405180910390a2600054604080517fe053ea3100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff80881660048301529151610556938893169163e053ea31916024808301926020929190829003018186803b15801561052457600080fd5b505afa158015610538573d6000803e3d6000fd5b505050506040513d602081101561054e57600080fd5b505185610650565b6105608282610239565b6105cb57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4d494e494d554d5f544945520000000000000000000000000000000000000000604482015290519081900360640190fd5b50505050565b60026020526000908152604090205460ff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008082600881111561061957fe5b1415610627575060006102ec565b6000600183600881111561063757fe5b0360200290508084901c63ffffffff1691505092915050565b50505056fea2646970667358221220dac33697f8f97279f3b0960357220f9b14fcbd7d8e9689cf95cdeeb87612173964736f6c634300060c0033";
