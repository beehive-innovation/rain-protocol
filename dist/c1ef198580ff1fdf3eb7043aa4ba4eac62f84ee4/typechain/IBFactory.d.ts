/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IBFactoryInterface extends ethers.utils.Interface {
  functions: {
    "collect(address)": FunctionFragment;
    "getBLabs()": FunctionFragment;
    "isBPool(address)": FunctionFragment;
    "newBPool()": FunctionFragment;
    "setBLabs(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "collect", values: [string]): string;
  encodeFunctionData(functionFragment: "getBLabs", values?: undefined): string;
  encodeFunctionData(functionFragment: "isBPool", values: [string]): string;
  encodeFunctionData(functionFragment: "newBPool", values?: undefined): string;
  encodeFunctionData(functionFragment: "setBLabs", values: [string]): string;

  decodeFunctionResult(functionFragment: "collect", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getBLabs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isBPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "newBPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setBLabs", data: BytesLike): Result;

  events: {};
}

export class IBFactory extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IBFactoryInterface;

  functions: {
    collect(pool: string, overrides?: Overrides): Promise<ContractTransaction>;

    "collect(address)"(
      pool: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getBLabs(overrides?: CallOverrides): Promise<[string]>;

    "getBLabs()"(overrides?: CallOverrides): Promise<[string]>;

    isBPool(b: string, overrides?: CallOverrides): Promise<[boolean]>;

    "isBPool(address)"(
      b: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    newBPool(overrides?: Overrides): Promise<ContractTransaction>;

    "newBPool()"(overrides?: Overrides): Promise<ContractTransaction>;

    setBLabs(b: string, overrides?: Overrides): Promise<ContractTransaction>;

    "setBLabs(address)"(
      b: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  collect(pool: string, overrides?: Overrides): Promise<ContractTransaction>;

  "collect(address)"(
    pool: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getBLabs(overrides?: CallOverrides): Promise<string>;

  "getBLabs()"(overrides?: CallOverrides): Promise<string>;

  isBPool(b: string, overrides?: CallOverrides): Promise<boolean>;

  "isBPool(address)"(b: string, overrides?: CallOverrides): Promise<boolean>;

  newBPool(overrides?: Overrides): Promise<ContractTransaction>;

  "newBPool()"(overrides?: Overrides): Promise<ContractTransaction>;

  setBLabs(b: string, overrides?: Overrides): Promise<ContractTransaction>;

  "setBLabs(address)"(
    b: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    collect(pool: string, overrides?: CallOverrides): Promise<void>;

    "collect(address)"(pool: string, overrides?: CallOverrides): Promise<void>;

    getBLabs(overrides?: CallOverrides): Promise<string>;

    "getBLabs()"(overrides?: CallOverrides): Promise<string>;

    isBPool(b: string, overrides?: CallOverrides): Promise<boolean>;

    "isBPool(address)"(b: string, overrides?: CallOverrides): Promise<boolean>;

    newBPool(overrides?: CallOverrides): Promise<string>;

    "newBPool()"(overrides?: CallOverrides): Promise<string>;

    setBLabs(b: string, overrides?: CallOverrides): Promise<void>;

    "setBLabs(address)"(b: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    collect(pool: string, overrides?: Overrides): Promise<BigNumber>;

    "collect(address)"(pool: string, overrides?: Overrides): Promise<BigNumber>;

    getBLabs(overrides?: CallOverrides): Promise<BigNumber>;

    "getBLabs()"(overrides?: CallOverrides): Promise<BigNumber>;

    isBPool(b: string, overrides?: CallOverrides): Promise<BigNumber>;

    "isBPool(address)"(
      b: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    newBPool(overrides?: Overrides): Promise<BigNumber>;

    "newBPool()"(overrides?: Overrides): Promise<BigNumber>;

    setBLabs(b: string, overrides?: Overrides): Promise<BigNumber>;

    "setBLabs(address)"(b: string, overrides?: Overrides): Promise<BigNumber>;
  };

  populateTransaction: {
    collect(pool: string, overrides?: Overrides): Promise<PopulatedTransaction>;

    "collect(address)"(
      pool: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getBLabs(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getBLabs()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isBPool(
      b: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isBPool(address)"(
      b: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    newBPool(overrides?: Overrides): Promise<PopulatedTransaction>;

    "newBPool()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    setBLabs(b: string, overrides?: Overrides): Promise<PopulatedTransaction>;

    "setBLabs(address)"(
      b: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
