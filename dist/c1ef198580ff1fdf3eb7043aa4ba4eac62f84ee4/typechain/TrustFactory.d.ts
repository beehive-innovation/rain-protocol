/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface TrustFactoryInterface extends ethers.utils.Interface {
  functions: {
    "createChild(tuple,tuple,tuple)": FunctionFragment;
    "isChild(address)": FunctionFragment;
    "redeemableERC20Factory()": FunctionFragment;
    "redeemableERC20PoolFactory()": FunctionFragment;
    "seedERC20Factory()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "createChild",
    values: [
      {
        creator: string;
        minimumCreatorRaise: BigNumberish;
        seeder: string;
        seederFee: BigNumberish;
        seederUnits: BigNumberish;
        seederCooldownDuration: BigNumberish;
        redeemInit: BigNumberish;
      },
      {
        name: string;
        symbol: string;
        tier: string;
        minimumStatus: BigNumberish;
        totalSupply: BigNumberish;
      },
      {
        reserve: string;
        reserveInit: BigNumberish;
        initialValuation: BigNumberish;
        finalValuation: BigNumberish;
        minimumTradingDuration: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(functionFragment: "isChild", values: [string]): string;
  encodeFunctionData(
    functionFragment: "redeemableERC20Factory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redeemableERC20PoolFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "seedERC20Factory",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "createChild",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isChild", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redeemableERC20Factory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemableERC20PoolFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "seedERC20Factory",
    data: BytesLike
  ): Result;

  events: {
    "NewContract(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewContract"): EventFragment;
}

export class TrustFactory extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: TrustFactoryInterface;

  functions: {
    "createChild(tuple,tuple,tuple)"(
      trustFactoryTrustConfig_: {
        creator: string;
        minimumCreatorRaise: BigNumberish;
        seeder: string;
        seederFee: BigNumberish;
        seederUnits: BigNumberish;
        seederCooldownDuration: BigNumberish;
        redeemInit: BigNumberish;
      },
      trustFactoryTrustRedeemableERC20Config_: {
        name: string;
        symbol: string;
        tier: string;
        minimumStatus: BigNumberish;
        totalSupply: BigNumberish;
      },
      trustFactoryTrustRedeemableERC20PoolConfig_: {
        reserve: string;
        reserveInit: BigNumberish;
        initialValuation: BigNumberish;
        finalValuation: BigNumberish;
        minimumTradingDuration: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "createChild(bytes)"(
      data_: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    isChild(
      maybeChild_: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "isChild(address)"(
      maybeChild_: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    redeemableERC20Factory(overrides?: CallOverrides): Promise<[string]>;

    "redeemableERC20Factory()"(overrides?: CallOverrides): Promise<[string]>;

    redeemableERC20PoolFactory(overrides?: CallOverrides): Promise<[string]>;

    "redeemableERC20PoolFactory()"(
      overrides?: CallOverrides
    ): Promise<[string]>;

    seedERC20Factory(overrides?: CallOverrides): Promise<[string]>;

    "seedERC20Factory()"(overrides?: CallOverrides): Promise<[string]>;
  };

  "createChild(tuple,tuple,tuple)"(
    trustFactoryTrustConfig_: {
      creator: string;
      minimumCreatorRaise: BigNumberish;
      seeder: string;
      seederFee: BigNumberish;
      seederUnits: BigNumberish;
      seederCooldownDuration: BigNumberish;
      redeemInit: BigNumberish;
    },
    trustFactoryTrustRedeemableERC20Config_: {
      name: string;
      symbol: string;
      tier: string;
      minimumStatus: BigNumberish;
      totalSupply: BigNumberish;
    },
    trustFactoryTrustRedeemableERC20PoolConfig_: {
      reserve: string;
      reserveInit: BigNumberish;
      initialValuation: BigNumberish;
      finalValuation: BigNumberish;
      minimumTradingDuration: BigNumberish;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "createChild(bytes)"(
    data_: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  isChild(
    maybeChild_: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "isChild(address)"(
    maybeChild_: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  redeemableERC20Factory(overrides?: CallOverrides): Promise<string>;

  "redeemableERC20Factory()"(overrides?: CallOverrides): Promise<string>;

  redeemableERC20PoolFactory(overrides?: CallOverrides): Promise<string>;

  "redeemableERC20PoolFactory()"(overrides?: CallOverrides): Promise<string>;

  seedERC20Factory(overrides?: CallOverrides): Promise<string>;

  "seedERC20Factory()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    "createChild(tuple,tuple,tuple)"(
      trustFactoryTrustConfig_: {
        creator: string;
        minimumCreatorRaise: BigNumberish;
        seeder: string;
        seederFee: BigNumberish;
        seederUnits: BigNumberish;
        seederCooldownDuration: BigNumberish;
        redeemInit: BigNumberish;
      },
      trustFactoryTrustRedeemableERC20Config_: {
        name: string;
        symbol: string;
        tier: string;
        minimumStatus: BigNumberish;
        totalSupply: BigNumberish;
      },
      trustFactoryTrustRedeemableERC20PoolConfig_: {
        reserve: string;
        reserveInit: BigNumberish;
        initialValuation: BigNumberish;
        finalValuation: BigNumberish;
        minimumTradingDuration: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<string>;

    "createChild(bytes)"(
      data_: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    isChild(maybeChild_: string, overrides?: CallOverrides): Promise<boolean>;

    "isChild(address)"(
      maybeChild_: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    redeemableERC20Factory(overrides?: CallOverrides): Promise<string>;

    "redeemableERC20Factory()"(overrides?: CallOverrides): Promise<string>;

    redeemableERC20PoolFactory(overrides?: CallOverrides): Promise<string>;

    "redeemableERC20PoolFactory()"(overrides?: CallOverrides): Promise<string>;

    seedERC20Factory(overrides?: CallOverrides): Promise<string>;

    "seedERC20Factory()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    NewContract(_contract: string | null): EventFilter;
  };

  estimateGas: {
    "createChild(tuple,tuple,tuple)"(
      trustFactoryTrustConfig_: {
        creator: string;
        minimumCreatorRaise: BigNumberish;
        seeder: string;
        seederFee: BigNumberish;
        seederUnits: BigNumberish;
        seederCooldownDuration: BigNumberish;
        redeemInit: BigNumberish;
      },
      trustFactoryTrustRedeemableERC20Config_: {
        name: string;
        symbol: string;
        tier: string;
        minimumStatus: BigNumberish;
        totalSupply: BigNumberish;
      },
      trustFactoryTrustRedeemableERC20PoolConfig_: {
        reserve: string;
        reserveInit: BigNumberish;
        initialValuation: BigNumberish;
        finalValuation: BigNumberish;
        minimumTradingDuration: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "createChild(bytes)"(
      data_: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    isChild(maybeChild_: string, overrides?: Overrides): Promise<BigNumber>;

    "isChild(address)"(
      maybeChild_: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    redeemableERC20Factory(overrides?: CallOverrides): Promise<BigNumber>;

    "redeemableERC20Factory()"(overrides?: CallOverrides): Promise<BigNumber>;

    redeemableERC20PoolFactory(overrides?: CallOverrides): Promise<BigNumber>;

    "redeemableERC20PoolFactory()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    seedERC20Factory(overrides?: CallOverrides): Promise<BigNumber>;

    "seedERC20Factory()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    "createChild(tuple,tuple,tuple)"(
      trustFactoryTrustConfig_: {
        creator: string;
        minimumCreatorRaise: BigNumberish;
        seeder: string;
        seederFee: BigNumberish;
        seederUnits: BigNumberish;
        seederCooldownDuration: BigNumberish;
        redeemInit: BigNumberish;
      },
      trustFactoryTrustRedeemableERC20Config_: {
        name: string;
        symbol: string;
        tier: string;
        minimumStatus: BigNumberish;
        totalSupply: BigNumberish;
      },
      trustFactoryTrustRedeemableERC20PoolConfig_: {
        reserve: string;
        reserveInit: BigNumberish;
        initialValuation: BigNumberish;
        finalValuation: BigNumberish;
        minimumTradingDuration: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "createChild(bytes)"(
      data_: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    isChild(
      maybeChild_: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "isChild(address)"(
      maybeChild_: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    redeemableERC20Factory(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "redeemableERC20Factory()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    redeemableERC20PoolFactory(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "redeemableERC20PoolFactory()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    seedERC20Factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "seedERC20Factory()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
