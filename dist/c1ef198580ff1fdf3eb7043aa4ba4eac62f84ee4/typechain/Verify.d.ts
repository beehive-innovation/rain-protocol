/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface VerifyInterface extends ethers.utils.Interface {
  functions: {
    "APPROVER()": FunctionFragment;
    "APPROVER_ADMIN()": FunctionFragment;
    "BANNER()": FunctionFragment;
    "BANNER_ADMIN()": FunctionFragment;
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "REMOVER()": FunctionFragment;
    "REMOVER_ADMIN()": FunctionFragment;
    "UNINITIALIZED()": FunctionFragment;
    "add(uint256)": FunctionFragment;
    "approve(address)": FunctionFragment;
    "ban(address)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getRoleMember(bytes32,uint256)": FunctionFragment;
    "getRoleMemberCount(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "remove(address)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "state(address)": FunctionFragment;
    "states(address)": FunctionFragment;
    "statusAtBlock(tuple,uint32)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "APPROVER", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "APPROVER_ADMIN",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "BANNER", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "BANNER_ADMIN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "REMOVER", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "REMOVER_ADMIN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UNINITIALIZED",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "add", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "approve", values: [string]): string;
  encodeFunctionData(functionFragment: "ban", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMember",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMemberCount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "remove", values: [string]): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "state", values: [string]): string;
  encodeFunctionData(functionFragment: "states", values: [string]): string;
  encodeFunctionData(
    functionFragment: "statusAtBlock",
    values: [
      {
        id: BigNumberish;
        addedSince: BigNumberish;
        approvedSince: BigNumberish;
        bannedSince: BigNumberish;
      },
      BigNumberish
    ]
  ): string;

  decodeFunctionResult(functionFragment: "APPROVER", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "APPROVER_ADMIN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "BANNER", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "BANNER_ADMIN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "REMOVER", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "REMOVER_ADMIN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UNINITIALIZED",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "add", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ban", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMemberCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "remove", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "state", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "states", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "statusAtBlock",
    data: BytesLike
  ): Result;

  events: {
    "Add(address,uint256)": EventFragment;
    "Approve(address)": EventFragment;
    "Ban(address)": EventFragment;
    "Remove(address)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Add"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Approve"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Ban"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Remove"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
}

export class Verify extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: VerifyInterface;

  functions: {
    APPROVER(overrides?: CallOverrides): Promise<[string]>;

    "APPROVER()"(overrides?: CallOverrides): Promise<[string]>;

    APPROVER_ADMIN(overrides?: CallOverrides): Promise<[string]>;

    "APPROVER_ADMIN()"(overrides?: CallOverrides): Promise<[string]>;

    BANNER(overrides?: CallOverrides): Promise<[string]>;

    "BANNER()"(overrides?: CallOverrides): Promise<[string]>;

    BANNER_ADMIN(overrides?: CallOverrides): Promise<[string]>;

    "BANNER_ADMIN()"(overrides?: CallOverrides): Promise<[string]>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<[string]>;

    REMOVER(overrides?: CallOverrides): Promise<[string]>;

    "REMOVER()"(overrides?: CallOverrides): Promise<[string]>;

    REMOVER_ADMIN(overrides?: CallOverrides): Promise<[string]>;

    "REMOVER_ADMIN()"(overrides?: CallOverrides): Promise<[string]>;

    UNINITIALIZED(overrides?: CallOverrides): Promise<[number]>;

    "UNINITIALIZED()"(overrides?: CallOverrides): Promise<[number]>;

    add(id_: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>;

    "add(uint256)"(
      id_: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    approve(
      account_: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "approve(address)"(
      account_: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    ban(account_: string, overrides?: Overrides): Promise<ContractTransaction>;

    "ban(address)"(
      account_: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getRoleMember(bytes32,uint256)"(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getRoleMemberCount(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    remove(
      account_: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "remove(address)"(
      account_: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    state(
      account_: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, number, number, number] & {
          id: BigNumber;
          addedSince: number;
          approvedSince: number;
          bannedSince: number;
        }
      ]
    >;

    "state(address)"(
      account_: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, number, number, number] & {
          id: BigNumber;
          addedSince: number;
          approvedSince: number;
          bannedSince: number;
        }
      ]
    >;

    states(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, number, number] & {
        id: BigNumber;
        addedSince: number;
        approvedSince: number;
        bannedSince: number;
      }
    >;

    "states(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, number, number] & {
        id: BigNumber;
        addedSince: number;
        approvedSince: number;
        bannedSince: number;
      }
    >;

    statusAtBlock(
      state_: {
        id: BigNumberish;
        addedSince: BigNumberish;
        approvedSince: BigNumberish;
        bannedSince: BigNumberish;
      },
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    "statusAtBlock(tuple,uint32)"(
      state_: {
        id: BigNumberish;
        addedSince: BigNumberish;
        approvedSince: BigNumberish;
        bannedSince: BigNumberish;
      },
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;
  };

  APPROVER(overrides?: CallOverrides): Promise<string>;

  "APPROVER()"(overrides?: CallOverrides): Promise<string>;

  APPROVER_ADMIN(overrides?: CallOverrides): Promise<string>;

  "APPROVER_ADMIN()"(overrides?: CallOverrides): Promise<string>;

  BANNER(overrides?: CallOverrides): Promise<string>;

  "BANNER()"(overrides?: CallOverrides): Promise<string>;

  BANNER_ADMIN(overrides?: CallOverrides): Promise<string>;

  "BANNER_ADMIN()"(overrides?: CallOverrides): Promise<string>;

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<string>;

  REMOVER(overrides?: CallOverrides): Promise<string>;

  "REMOVER()"(overrides?: CallOverrides): Promise<string>;

  REMOVER_ADMIN(overrides?: CallOverrides): Promise<string>;

  "REMOVER_ADMIN()"(overrides?: CallOverrides): Promise<string>;

  UNINITIALIZED(overrides?: CallOverrides): Promise<number>;

  "UNINITIALIZED()"(overrides?: CallOverrides): Promise<number>;

  add(id_: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>;

  "add(uint256)"(
    id_: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  approve(
    account_: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "approve(address)"(
    account_: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  ban(account_: string, overrides?: Overrides): Promise<ContractTransaction>;

  "ban(address)"(
    account_: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  "getRoleAdmin(bytes32)"(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMember(
    role: BytesLike,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getRoleMember(bytes32,uint256)"(
    role: BytesLike,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMemberCount(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getRoleMemberCount(bytes32)"(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "grantRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "hasRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  remove(account_: string, overrides?: Overrides): Promise<ContractTransaction>;

  "remove(address)"(
    account_: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "renounceRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "revokeRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  state(
    account_: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, number, number, number] & {
      id: BigNumber;
      addedSince: number;
      approvedSince: number;
      bannedSince: number;
    }
  >;

  "state(address)"(
    account_: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, number, number, number] & {
      id: BigNumber;
      addedSince: number;
      approvedSince: number;
      bannedSince: number;
    }
  >;

  states(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, number, number, number] & {
      id: BigNumber;
      addedSince: number;
      approvedSince: number;
      bannedSince: number;
    }
  >;

  "states(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, number, number, number] & {
      id: BigNumber;
      addedSince: number;
      approvedSince: number;
      bannedSince: number;
    }
  >;

  statusAtBlock(
    state_: {
      id: BigNumberish;
      addedSince: BigNumberish;
      approvedSince: BigNumberish;
      bannedSince: BigNumberish;
    },
    blockNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  "statusAtBlock(tuple,uint32)"(
    state_: {
      id: BigNumberish;
      addedSince: BigNumberish;
      approvedSince: BigNumberish;
      bannedSince: BigNumberish;
    },
    blockNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  callStatic: {
    APPROVER(overrides?: CallOverrides): Promise<string>;

    "APPROVER()"(overrides?: CallOverrides): Promise<string>;

    APPROVER_ADMIN(overrides?: CallOverrides): Promise<string>;

    "APPROVER_ADMIN()"(overrides?: CallOverrides): Promise<string>;

    BANNER(overrides?: CallOverrides): Promise<string>;

    "BANNER()"(overrides?: CallOverrides): Promise<string>;

    BANNER_ADMIN(overrides?: CallOverrides): Promise<string>;

    "BANNER_ADMIN()"(overrides?: CallOverrides): Promise<string>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<string>;

    REMOVER(overrides?: CallOverrides): Promise<string>;

    "REMOVER()"(overrides?: CallOverrides): Promise<string>;

    REMOVER_ADMIN(overrides?: CallOverrides): Promise<string>;

    "REMOVER_ADMIN()"(overrides?: CallOverrides): Promise<string>;

    UNINITIALIZED(overrides?: CallOverrides): Promise<number>;

    "UNINITIALIZED()"(overrides?: CallOverrides): Promise<number>;

    add(id_: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "add(uint256)"(id_: BigNumberish, overrides?: CallOverrides): Promise<void>;

    approve(account_: string, overrides?: CallOverrides): Promise<void>;

    "approve(address)"(
      account_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    ban(account_: string, overrides?: CallOverrides): Promise<void>;

    "ban(address)"(account_: string, overrides?: CallOverrides): Promise<void>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getRoleMember(bytes32,uint256)"(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleMemberCount(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    remove(account_: string, overrides?: CallOverrides): Promise<void>;

    "remove(address)"(
      account_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    state(
      account_: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, number, number] & {
        id: BigNumber;
        addedSince: number;
        approvedSince: number;
        bannedSince: number;
      }
    >;

    "state(address)"(
      account_: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, number, number] & {
        id: BigNumber;
        addedSince: number;
        approvedSince: number;
        bannedSince: number;
      }
    >;

    states(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, number, number] & {
        id: BigNumber;
        addedSince: number;
        approvedSince: number;
        bannedSince: number;
      }
    >;

    "states(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, number, number] & {
        id: BigNumber;
        addedSince: number;
        approvedSince: number;
        bannedSince: number;
      }
    >;

    statusAtBlock(
      state_: {
        id: BigNumberish;
        addedSince: BigNumberish;
        approvedSince: BigNumberish;
        bannedSince: BigNumberish;
      },
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    "statusAtBlock(tuple,uint32)"(
      state_: {
        id: BigNumberish;
        addedSince: BigNumberish;
        approvedSince: BigNumberish;
        bannedSince: BigNumberish;
      },
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;
  };

  filters: {
    Add(account: string | null, id: BigNumberish | null): EventFilter;

    Approve(account: string | null): EventFilter;

    Ban(account: string | null): EventFilter;

    Remove(account: string | null): EventFilter;

    RoleAdminChanged(
      role: BytesLike | null,
      previousAdminRole: BytesLike | null,
      newAdminRole: BytesLike | null
    ): EventFilter;

    RoleGranted(
      role: BytesLike | null,
      account: string | null,
      sender: string | null
    ): EventFilter;

    RoleRevoked(
      role: BytesLike | null,
      account: string | null,
      sender: string | null
    ): EventFilter;
  };

  estimateGas: {
    APPROVER(overrides?: CallOverrides): Promise<BigNumber>;

    "APPROVER()"(overrides?: CallOverrides): Promise<BigNumber>;

    APPROVER_ADMIN(overrides?: CallOverrides): Promise<BigNumber>;

    "APPROVER_ADMIN()"(overrides?: CallOverrides): Promise<BigNumber>;

    BANNER(overrides?: CallOverrides): Promise<BigNumber>;

    "BANNER()"(overrides?: CallOverrides): Promise<BigNumber>;

    BANNER_ADMIN(overrides?: CallOverrides): Promise<BigNumber>;

    "BANNER_ADMIN()"(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    REMOVER(overrides?: CallOverrides): Promise<BigNumber>;

    "REMOVER()"(overrides?: CallOverrides): Promise<BigNumber>;

    REMOVER_ADMIN(overrides?: CallOverrides): Promise<BigNumber>;

    "REMOVER_ADMIN()"(overrides?: CallOverrides): Promise<BigNumber>;

    UNINITIALIZED(overrides?: CallOverrides): Promise<BigNumber>;

    "UNINITIALIZED()"(overrides?: CallOverrides): Promise<BigNumber>;

    add(id_: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "add(uint256)"(
      id_: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    approve(account_: string, overrides?: Overrides): Promise<BigNumber>;

    "approve(address)"(
      account_: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    ban(account_: string, overrides?: Overrides): Promise<BigNumber>;

    "ban(address)"(account_: string, overrides?: Overrides): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleMember(bytes32,uint256)"(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleMemberCount(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    remove(account_: string, overrides?: Overrides): Promise<BigNumber>;

    "remove(address)"(
      account_: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    state(account_: string, overrides?: CallOverrides): Promise<BigNumber>;

    "state(address)"(
      account_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    states(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "states(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    statusAtBlock(
      state_: {
        id: BigNumberish;
        addedSince: BigNumberish;
        approvedSince: BigNumberish;
        bannedSince: BigNumberish;
      },
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "statusAtBlock(tuple,uint32)"(
      state_: {
        id: BigNumberish;
        addedSince: BigNumberish;
        approvedSince: BigNumberish;
        bannedSince: BigNumberish;
      },
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    APPROVER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "APPROVER()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    APPROVER_ADMIN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "APPROVER_ADMIN()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    BANNER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "BANNER()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    BANNER_ADMIN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "BANNER_ADMIN()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "DEFAULT_ADMIN_ROLE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    REMOVER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "REMOVER()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    REMOVER_ADMIN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "REMOVER_ADMIN()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    UNINITIALIZED(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "UNINITIALIZED()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    add(
      id_: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "add(uint256)"(
      id_: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    approve(
      account_: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "approve(address)"(
      account_: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    ban(account_: string, overrides?: Overrides): Promise<PopulatedTransaction>;

    "ban(address)"(
      account_: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRoleMember(bytes32,uint256)"(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRoleMemberCount(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    remove(
      account_: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "remove(address)"(
      account_: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    state(
      account_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "state(address)"(
      account_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    states(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "states(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    statusAtBlock(
      state_: {
        id: BigNumberish;
        addedSince: BigNumberish;
        approvedSince: BigNumberish;
        bannedSince: BigNumberish;
      },
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "statusAtBlock(tuple,uint32)"(
      state_: {
        id: BigNumberish;
        addedSince: BigNumberish;
        approvedSince: BigNumberish;
        bannedSince: BigNumberish;
      },
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
