import { getAllStandardOpsEnum } from "./allStandardOpmeta";

export enum AllStandardOps {
  CHAINLINK_PRICE,
  CALL,
  CONTEXT,
  CONTEXT_ROW,
  DEBUG,
  DO_WHILE,
  EXTERN,
  FOLD_CONTEXT,
  GET,
  LOOP_N,
  READ_MEMORY,
  SET,
  HASH,
  ERC20_BALANCE_OF,
  ERC20_TOTAL_SUPPLY,
  ERC20_SNAPSHOT_BALANCE_OF_AT,
  ERC20_SNAPSHOT_TOTAL_SUPPLY_AT,
  ERC721_BALANCE_OF,
  ERC721_OWNER_OF,
  ERC1155_BALANCE_OF,
  ERC1155_BALANCE_OF_BATCH,
  IERC5313_OWNER,
  ENSURE,
  BLOCK_NUMBER,
  BLOCK_TIMESTAMP,
  EXPLODE32,
  SCALE18,
  SCALE18_DIV,
  SCALE18_DYNAMIC,
  SCALE18_MUL,
  SCALE_BY,
  SCALEN,
  ANY,
  EAGER_IF,
  EQUAL_TO,
  EVERY,
  GREATER_THAN,
  ISZERO,
  LESS_THAN,
  SATURATING_ADD,
  SATURATING_MUL,
  SATURATING_SUB,
  ADD,
  DIV,
  EXP,
  MAX,
  MIN,
  MOD,
  MUL,
  SUB,
  IORDERBOOKV1_VAULT_BALANCE,
  ISALEV2_REMAINING_TOKEN_INVENTORY,
  ISALEV2_RESERVE,
  ISALEV2_SALE_STATUS,
  ISALEV2_TOKEN,
  ISALEV2_TOTAL_RESERVE_RECEIVED,
  IVERIFYV1_ACCOUNT_STATUS_AT_TIME,
  ITIERV2_REPORT,
  ITIERV2_REPORT_TIME_FOR_TIER,
  SATURATING_DIFF,
  SELECT_LTE,
  UPDATE_TIMES_FOR_TIER_RANGE,
  length,
}

export const Opcode = AllStandardOps;

export const RainterpreterOps = AllStandardOps;

/**
 * We want to preserve TypeScript enum, so we verify that it lines up with the autogenerated opmeta list.
 */
Object.entries(getAllStandardOpsEnum()).forEach((op, i_) => {
  if (op[0] !== AllStandardOps[op[1]]) {
    console.log(op[0], AllStandardOps[op[1]]);
    throw new Error(`AllStandardOps does not match autogenerated list
    expected  ${op[0]}
    got       ${AllStandardOps[op[1]]}`);
  }

  if (op[0] !== AllStandardOps[i_])
    throw new Error(`AllStandardOps does not match autogenerated list (missing opmeta file?)
    expected  ${op[0]}
    got       ${AllStandardOps[op[1]]}`);
});
